//input file .sql
var config = require('../../config.json');
var utiles = require('../utils/utiles.js');
var fs = require('fs');
var mysql = require('mysql');
var dbConf
if (config.enviroment === 'production') dbConf = config.db_production
else if (config.enviroment === 'development') dbConf = config.db_development
else if (config.enviroment === 'testing') dbConf = config.db_testing
else dbConf = config.db_development
dbConf.multipleStatements = true
var now = new Date();
var model_template = "" +
    "/** " +
    " * MODEL AUTO_GENERATED BY DMT-GENERATOR\n" +
    " * {{TABLE_NAME}}\n" +
    " * {{FIELDS}}\n" +
    " * DMT " + now.getFullYear() + "\n" +
    " * GENERATED: " + now.getDate() + " / " + (now.getMonth() + 1) + " / " + now.getFullYear() +
    " - " + now.getHours() + ":" + now.getMinutes() + ":" + now.getSeconds() + "\n" +
    " **/\n" +
    "var BaseModel = require('../utils/model.js')\n" +
    "var util = require('util')\n" +
    "var {{MODULE_NAME}} = function () {\n" +
    "\tthis.fields = {{FIELDS}}\n" +
    "\tvar params = ['{{TABLE_NAME}}', 'mysql']\n" +
    "\tBaseModel.apply(this, params)\n" +
    "\treturn this\n" +
    "};\n" +
    "util.inherits({{MODULE_NAME}}, BaseModel)\n" +
    "module.exports = {{MODULE_NAME}}";

var controller_template = "" +
    "/** " +
    " * CONTROLLER AUTO_GENERATED BY DMT-GENERATOR\n" +
    " * {{CONTROLLER_NAME}}\n" +
    " * DMT " + now.getFullYear() + "\n" +
    " * GENERATED: " + now.getDate() + " / " + (now.getMonth() + 1) + " / " + now.getFullYear() +
    " - " + now.getHours() + ":" + now.getMinutes() + ":" + now.getSeconds() + "\n" +
    " **/\n" +
    "var BaseController = require('../utils/controller.js');\n" +
    "var util = require('util');\n" +
    "var utiles = require('../utils/utiles.js');\n" +
    "var Errors = require('../utils/errors.js');\n" +
    "var Permissions = require('../utils/permissions.js');\n" +
    "var Auth_ctrl = require('./auth.js');\n" +
    "{{IMPORT_MODELS}}\n" +
    "var {{CONTROLLER_NAME}} = function () {\n" +
    "{{MODELS}}\n" +
    "\t//---------------------------------------------------------------\n" +
    "\tvar getMap = new Map(), postMap = new Map(), putMap = new Map(), deleteMap = new Map();\n" +
    "\tvar _get = function(model,user,params){\n" +
    "\t\tif (params.id) {\n" +
    "\t\t\treturn model.getByUid(params.id);\n" +
    "\t\t} else {\n" +
    "\t\t\treturn model.getAll({\n" +
    "\t\t\t\tfilter: params.filter,\n" +
    "\t\t\t\tlimit: params.limit,\n" +
    "\t\t\t\tpage: params.page,\n" +
    "\t\t\t\torder: params.order,\n" +
    "\t\t\t\tfilter_fields:params.filter_field,\n" +
    "\t\t\t\tfilter_values:params.filter_value,\n" +
    "\t\t\t\tfields: params.field\n" +
    "\t\t\t});\n" +
    "\t\t}\n" +
    "\t}\n" +
    "{{GET_METHODS}}\n" +
    "{{GET_MAP}}\n" +
    "{{POST_METHODS}}\n" +
    "{{POST_MAP}}\n" +
    "{{PUT_METHODS}}\n" +
    "{{PUT_MAP}}\n" +
    "{{DELETE_METHODS}}\n" +
    "{{DELETE_MAP}}\n" +
    "\tvar params = [getMap, postMap, putMap, deleteMap];\n" +
    "\tBaseController.apply(this, params);\n" +
    "\t//---------------------------------------------------------------\n" +
    "\treturn this;\n" +
    "};\n" +
    "util.inherits({{CONTROLLER_NAME}}, BaseController);\n" +
    "module.exports = {{CONTROLLER_NAME}};";
var individual_import_model = "var {{MODEL_NAME}} = require('../models/{{MODEL_NAME}}.js');";
var individual_model = "\tvar model_{{MODEL_NAME}} = new {{MODEL_NAME}}()";
var individiual_get_method_template = "" +
    "\t/**\n" +
    "\t * {{MODEL_NAME}}\n" +
    "\t*/\n" +
    "\tvar get_{{MODEL_NAME}} = function (user, params) {\n" +
    "\t\treturn _get(model_{{MODEL_NAME}},user,params);\n" +
    "\t};";
var individiual_get_map_template = "\tgetMap.set('{{MODEL_NAME}}', { method: get_{{MODEL_NAME}}, permits: Permissions.ADMIN });";
var individiual_create_method_template = "" +
    "\t/**\n" +
    "\t * {{MODEL_NAME}}\n" +
    "\t*/\n" +
    "\tvar create_{{MODEL_NAME}} = function (user, body) {\n" +
    "\t\treturn model_{{MODEL_NAME}}.create(body);\n" +
    "\t};";
var individiual_create_map_template = "\tpostMap.set('{{MODEL_NAME}}', { method: create_{{MODEL_NAME}}, permits: Permissions.ADMIN });";
var individiual_update_method_template = "" +
    "\t/**\n" +
    "\t * {{MODEL_NAME}}\n" +
    "\t*/\n" +
    "\tvar update_{{MODEL_NAME}} = function (user, body) {\n" +
    "\t\tif (!body.{{PRIMARY_KEY}}) {\n" +
    "\t\t\tthrow utiles.informError(400);\n" +
    "\t\t}\n" +
    "\t\treturn model_{{MODEL_NAME}}.update(body,{{{PRIMARY_KEY}}:body.{{PRIMARY_KEY}}});\n" +
    "\t};";
var individiual_update_map_template = "\tputMap.set('{{MODEL_NAME}}', { method: update_{{MODEL_NAME}}, permits: Permissions.ADMIN });";
var individiual_delete_method_template = "" +
    "\t/**\n" +
    "\t * {{MODEL_NAME}}\n" +
    "\t*/\n" +
    "\tvar delete_{{MODEL_NAME}} = function (user, body) {\n" +
    "\t\tif (!body.{{PRIMARY_KEY}}) {\n" +
    "\t\t\tthrow utiles.informError(400);\n" +
    "\t\t}\n" +
    "\t\treturn model_{{MODEL_NAME}}.delete(body,{{{PRIMARY_KEY}}:body.{{PRIMARY_KEY}}});\n" +
    "\t};";
var individiual_delete_map_template = "\tdeleteMap.set('{{MODEL_NAME}}', { method: delete_{{MODEL_NAME}}, permits: Permissions.ADMIN });";

var mySqlGen = function () {

    this.parse = function () {
        //Load file into database
        var entities = {};
        getTables(entities).then((promises) => {
            return Promise.all(promises)
        }).then((info) => {
            fs.writeFileSync("../../public/auto_entities.js", entities);
            //check permissions
            getControllers(entities);
        }).catch((e) => {
            console.log(e);
        })


    };
    function getTables(entities) {
        var connection = mysql.createConnection(dbConf);
        var query = "SELECT TABLE_NAME FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '" + dbConf.database + "';";
        
        return execQuery(query, connection).then((tables) => {
            if (tables.length === 0) {
                throw utiles.informError(300);
            }
            let promises = [];
            for (let i = 0; i < tables.length; i++) {
                let table = tables[i];
                let table_name = table.TABLE_NAME;
                let file_name = "./app/models/" + table_name + ".js";
                if (fs.existsSync(file_name)) {
                    console.log(file_name + " already exists")
                    continue;
                }
                let module_name = table_name.charAt(0).toUpperCase() + table_name.slice(1);
                let info = model_template.replace(new RegExp("{{TABLE_NAME}}", 'g'), table_name);
                info = info.replace(new RegExp("{{MODULE_NAME}}", 'g'), module_name);
                let promise = describeTable(table, info, entities)
                promises.push(promise);
                promise.then((info) => {
                    fs.writeFileSync("./app/models/" + table_name + ".js", info);
                    return true;
                })
            }
            return promises;
        });
    };
    function describeTable(table, str, entities) {
        var connection = mysql.createConnection(dbConf);
        var query = "DESCRIBE " + table.TABLE_NAME;
        return execQuery(query, connection).then((info) => {
            let entity = {
                fields: []
            };
            function TypeTotype(Type) {
                return Type.indexOf("int") != -1 ? "int" :
                    Type.indexOf("varchar") != -1 ? "string" :
                        Type.indexOf("text") != -1 ? "text" :
                            Type.indexOf("tinyint") != -1 ? "boolean" :
                                Type.indexOf("date") != -1 ? "date" :
                                    Type.indexOf("datetime") != -1 ? "datetime" :
                                        ""
            }
            info.forEach((f) => {
                if (f.Key === "PRI") {
                    entity.defaultSort = entity.defaultSort || f.Field; //take the first Key
                }
                //{"Field":"id","Type":"int(11)","Null":"NO","Key":"PRI","Default":null,"Extra":"auto_increment"}
                entity.fields.push({
                    name: f.Field,
                    type: TypeTotype(f.Type),
                    disabled: f.Key === "PRI" || f.Type.indexOf("timestamp") != -1,
                    key: f.Key === "PRI"
                });
            })
            entities[table.TABLE_NAME] = entity;
            str = str.replace(new RegExp('{{FIELDS}}', 'g'), JSON.stringify(info));
            return str;
        });
    }
    function execQuery(query, connection) {
        return new Promise((resolve, reject) => {
            if (config.verbose) console.log(query)
            connection.connect()
            connection.query(query, (err, result, fields) => {
                if (err) reject(err)
                else resolve(result)
            })
            connection.end({ timeout: 60000 });
        })
    }

    /**
     * Controllers
     */
    function getControllers(entities) {
        let dmt = require('../../public/config.js');
        dmt.config.forEach((section) => {
            let controller_name = section.section;
            let file_name = "./app/controllers/auto_" + section.path + ".js";
            if (fs.existsSync(file_name)) {
                console.log(file_name + " already exists")
            }
            let import_models = [];
            let models = [];
            let get_models = [];
            let get_maps = [];
            let post_models = [];
            let post_maps = [];
            let put_models = [];
            let put_maps = [];
            let delete_models = [];
            let delete_maps = [];

            section.pages.forEach((page) => {
                if (!page.entity) {
                    return;
                }

                import_models.push(individual_import_model.replace(new RegExp('{{MODEL_NAME}}', 'g'), page.entity));
                models.push(individual_model.replace(new RegExp('{{MODEL_NAME}}', 'g'), page.entity));

                get_models.push(individiual_get_method_template.replace(new RegExp('{{MODEL_NAME}}', 'g'), page.entity));
                get_maps.push(individiual_get_map_template.replace(new RegExp('{{MODEL_NAME}}', 'g'), page.entity));

                post_models.push(individiual_create_method_template.replace(new RegExp('{{MODEL_NAME}}', 'g'), page.entity));
                post_maps.push(individiual_create_map_template.replace(new RegExp('{{MODEL_NAME}}', 'g'), page.entity));

                let path = "../models/" + page.entity + ".js";
                let model = new (require(path))();
                let primary_key = "id";
                try {
                    model.fields.forEach((field) => {
                        if (field.Key === "PRI") {
                            primary_key = field.Field;
                        }
                    });
                } catch (e) {
                    primary_key = "id";
                }

                let update = individiual_update_method_template.replace(new RegExp('{{MODEL_NAME}}', 'g'), page.entity);
                update = update.replace(new RegExp('{{PRIMARY_KEY}}', 'g'), primary_key)
                put_models.push(update);
                put_maps.push(individiual_update_map_template.replace(new RegExp('{{MODEL_NAME}}', 'g'), page.entity));

                let _delete = individiual_delete_method_template.replace(new RegExp('{{MODEL_NAME}}', 'g'), page.entity);
                _delete = _delete.replace(new RegExp('{{PRIMARY_KEY}}', 'g'), primary_key)
                delete_models.push(_delete);
                delete_maps.push(individiual_delete_map_template.replace(new RegExp('{{MODEL_NAME}}', 'g'), page.entity));
            });
            let controller = controller_template.replace(new RegExp('{{CONTROLLER_NAME}}', 'g'), controller_name);
            controller = controller.replace(new RegExp('{{IMPORT_MODELS}}', 'g'), import_models.join('\n'));
            controller = controller.replace(new RegExp('{{MODELS}}', 'g'), models.join('\n'));
            controller = controller.replace(new RegExp('{{GET_METHODS}}', 'g'), get_models.join('\n'));
            controller = controller.replace(new RegExp('{{GET_MAP}}', 'g'), get_maps.join('\n'));
            controller = controller.replace(new RegExp('{{POST_METHODS}}', 'g'), post_models.join('\n'));
            controller = controller.replace(new RegExp('{{POST_MAP}}', 'g'), post_maps.join('\n'));
            controller = controller.replace(new RegExp('{{PUT_METHODS}}', 'g'), put_models.join('\n'));
            controller = controller.replace(new RegExp('{{PUT_MAP}}', 'g'), put_maps.join('\n'));
            controller = controller.replace(new RegExp('{{DELETE_METHODS}}', 'g'), delete_models.join('\n'));
            controller = controller.replace(new RegExp('{{DELETE_MAP}}', 'g'), delete_maps.join('\n'));
            fs.writeFile(file_name, controller, (error) => {
                if (error) {
                    console.log(error);
                }
            });
        });
    }
};

module.exports = mySqlGen;
