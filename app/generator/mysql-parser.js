//input file .sql
var config = require('../../config.json');
var utiles = require('../utils/utiles.js');
var fs = require('fs');
var mysql = require('mysql');
var dbConf = null;
var env = "db_" + config.enviroment;
dbConf = config[env]
dbConf.multipleStatements = true
var now = new Date();
var model_template = "" +
    "/** " +
    " * MODEL AUTO_GENERATED BY DMT-GENERATOR\n" +
    " * {{TABLE_NAME}}\n" +
    " * {{FIELDS}}\n" +
    " * DMT " + now.getFullYear() + "\n" +
    " * GENERATED: " + now.getDate() + " / " + (now.getMonth() + 1) + " / " + now.getFullYear() +
    " - " + now.getHours() + ":" + now.getMinutes() + ":" + now.getSeconds() + "\n" +
    " **/\n" +
    "var BaseModel = require('../utils/model.js')\n" +
    "var util = require('util')\n" +
    "var {{MODULE_NAME}} = function () {\n" +
    "\tvar params = [{\n" +
    "\t\ttable:'{{TABLE_NAME}}',\n" +
    "\t\tfields :{{FIELDS}},\n" +
    "\t\tmodel:'mysql'\n" +
    "\t}]\n" +
    "\tBaseModel.apply(this, params)\n" +
    "\treturn this\n" +
    "};\n" +
    "util.inherits({{MODULE_NAME}}, BaseModel)\n" +
    "module.exports = {{MODULE_NAME}}";
var entity_template = "" +
    "/** " +
    " * ENTITY AUTO_GENERATED BY DMT-GENERATOR\n" +
    " * {{ENTITY_NAME}}\n" +
    " * DMT " + now.getFullYear() + "\n" +
    " * GENERATED: " + now.getDate() + " / " + (now.getMonth() + 1) + " / " + now.getFullYear() +
    " - " + now.getHours() + ":" + now.getMinutes() + ":" + now.getSeconds() + "\n" +
    " **/\n" +
    "var BaseModel = require('../utils/model.js')\n" +
    "var util = require('util')\n" +
    "var {{MODULE_NAME}} = function () {\n" +
    "\tvar params = [{{ENTITY}}]\n" +
    "\tBaseModel.apply(this, params)\n" +
    "\treturn this\n" +
    "};\n" +
    "util.inherits({{MODULE_NAME}}, BaseModel)\n" +
    "module.exports = {{MODULE_NAME}}";
var controller_translate = "\t\ttranslate: {\n" +
    "\t\t\ttable: '{{TABLE_NAME}}_lang',\n" +
    "\t\t\tkey: 'id_{{TABLE_NAME}}'\n" +
    "\t\t},\n";
var controller_template = "" +
    "/** " +
    " * CONTROLLER AUTO_GENERATED BY DMT-GENERATOR\n" +
    " * {{CONTROLLER_NAME}}\n" +
    " * DMT " + now.getFullYear() + "\n" +
    " * GENERATED: " + now.getDate() + " / " + (now.getMonth() + 1) + " / " + now.getFullYear() +
    " - " + now.getHours() + ":" + now.getMinutes() + ":" + now.getSeconds() + "\n" +
    " **/\n" +
    "var BaseController = require('../utils/controller.js')\n" +
    "var util = require('util');\n" +
    "var utiles = require('../utils/utiles.js')\n" +
    "var Errors = require('../utils/errors.js')\n" +
    "var Permissions = require('../utils/permissions.js')\n" +
    "var Auth_ctrl = require('./auth.js')\n" +
    "{{IMPORT_MODELS}}\n" +
    "var {{CONTROLLER_NAME}}_controller = function () {\n" +
    "{{MODELS}}\n" +
    "\t//---------------------------------------------------------------\n" +
    "\tvar getMap = new Map(), postMap = new Map(), putMap = new Map(), deleteMap = new Map()\n" +
    "\tvar _get = function(model,user,params){\n" +
    "\t\tlet key = model.getPrimaryKey()\n" +
    "\t\tif (params.filter_field) {\n" +
    "\t\t\tif (typeof params.filter_field == 'string') {\n" +
    "\t\t\t\tparams.filter_field = [params.filter_field]\n" +
    "\t\t\t\tparams.filter_value = [params.filter_value]\n" +
    "\t\t\t}\n" +
    "\t\t} else {\n" +
    "\t\t\tparams.filter_field = []\n" +
    "\t\t\tparams.filter_value = []\n" +
    "\t\t}\n" +
    "\t\tif (params[key]) {\n" +
    "\t\t\tparams.filter_field.push(key)\n" +
    "\t\t\tparams.filter_value.push(params[key])\n" +
    "\t\t}\n" +
    "\t\treturn model.getAll({\n" +
    "\t\t\tfilter: params.filter,\n" +
    "\t\t\tlimit: params.limit,\n" +
    "\t\t\tpage: params.page,\n" +
    "\t\t\torder: params.order,\n" +
    "\t\t\tfilter_fields: params.filter_field,\n" +
    "\t\t\tfilter_values: params.filter_value,\n" +
    "\t\t\tfields: params.field,\n" +
    "\t\t\tlang: params.lang\n" +
    "\t\t})\n" +
    "\t}\n" +
    "{{GET_METHODS}}\n" +
    "{{GET_MAP}}\n" +
    "{{POST_METHODS}}\n" +
    "{{POST_MAP}}\n" +
    "{{PUT_METHODS}}\n" +
    "{{PUT_MAP}}\n" +
    "{{DELETE_METHODS}}\n" +
    "{{DELETE_MAP}}\n" +
    "\tvar params = [getMap, postMap, putMap, deleteMap]\n" +
    "\tBaseController.apply(this, params)\n" +
    "\t//---------------------------------------------------------------\n" +
    "\treturn this;\n" +
    "}\n" +
    "util.inherits({{CONTROLLER_NAME}}_controller, BaseController)\n" +
    "module.exports = {{CONTROLLER_NAME}}_controller";
var individual_import_model = "var {{MODEL_NAME}} = require('../models/{{MODEL_NAME}}.js')";
var individual_model = "\tvar model_{{MODEL_NAME}} = new {{MODEL_NAME}}()";
var individiual_get_method_template = "" +
    "\t/**\n" +
    "\t * @api {get} api/{{CONTROLLER_NAME}}/{{PUBLIC_NAME}} Request {{PUBLIC_NAME}} information\n" +
    "\t * @apiName Get{{PUBLIC_NAME}}\n" +
    "\t * @apiGroup {{CONTROLLER_NAME}}\n" +
    "\t * @apiVersion {{API_VERSION}}\n" +
    "\t * \n" +
    "{{PRIMARY_PARAMS}}" +
    "\t * @apiParam {String} filter Texto to search into DB.\n" +
    "\t * @apiParam {Array} fields Fields where the search have to be fetched.\n" +
    "\t * @apiParam {Number} limit number of items per page.\n" +
    "\t * @apiParam {Number} page number of the page to be fetched.\n" +
    "\t * @apiParam {Number} field to order the results.\n" +
    "\t * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.\n" +
    "\t * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.\n" +
    "\t * @apiParam {String} lang id of the language to get content if available.\n" +
    "\t * \n" +
    "\t * @apiSuccessExample Success-Response:\n" +
    "\t * HTTP/1.1 200 OK\n" +
    "\t * {\n" +
    "\t * \tdata:{{RESPONSE_DATA}},\n" +
    "\t * 	total_results:1\n" +
    "\t * }\n" +
    "\t*/\n" +
    "\tvar get_{{MODEL_NAME}} = function (user, params) {\n" +
    "\t\treturn _get(model_{{MODEL_NAME}},user,params)\n" +
    "\t}";
var individiual_get_map_template = "\tgetMap.set('{{PUBLIC_NAME}}', { method: get_{{MODEL_NAME}}, permits: Permissions.{{GET_PERMISSION}} })";
var individiual_create_method_template = "" +
    "\t/**\n" +
    "\t * @api {post} api/{{CONTROLLER_NAME}}/{{PUBLIC_NAME}} Create {{PUBLIC_NAME}} information\n" +
    "\t * @apiName Post{{PUBLIC_NAME}}\n" +
    "\t * @apiGroup {{CONTROLLER_NAME}}\n" +
    "\t * @apiVersion {{API_VERSION}}\n" +
    "\t * \n" +
    "{{PARAMS}} " +
    "\t * \n" +
    "\t */\n" +
    "\tvar create_{{MODEL_NAME}} = function (user, body) {\n" +
    "\t\treturn model_{{MODEL_NAME}}.create(body)\n" +
    "\t}";
var individiual_create_map_template = "\tpostMap.set('{{PUBLIC_NAME}}', { method: create_{{MODEL_NAME}}, permits: Permissions.{{POST_PERMISSION}} })";
var individiual_update_method_template = "" +
    "\t/**\n" +
    "\t * @api {put} api/{{CONTROLLER_NAME}}/{{PUBLIC_NAME}} Update {{PUBLIC_NAME}} information\n" +
    "\t * @apiName Put{{PUBLIC_NAME}}\n" +
    "\t * @apiGroup {{CONTROLLER_NAME}}\n" +
    "\t * @apiVersion {{API_VERSION}}\n" +
    "\t * \n" +
    "{{PARAMS}} " +
    "\t * \n" +
    "\t */\n" +
    "\tvar update_{{MODEL_NAME}} = function (user, body) {\n" +
    "\t\tif (!body.{{PRIMARY_KEY}}) {\n" +
    "\t\t\tthrow utiles.informError(400)\n" +
    "\t\t}\n" +
    "\t\treturn model_{{MODEL_NAME}}.update(body,{{{PRIMARY_KEY}}:body.{{PRIMARY_KEY}}})\n" +
    "\t}";
var individiual_update_map_template = "\tputMap.set('{{PUBLIC_NAME}}', { method: update_{{MODEL_NAME}}, permits: Permissions.{{PUT_PERMISSION}} })";
var individiual_delete_method_template = "" +
    "\t/**\n" +
    "\t * @api {delete} api/{{CONTROLLER_NAME}}/{{PUBLIC_NAME}} Delete {{PUBLIC_NAME}} information\n" +
    "\t * @apiName Delete{{PUBLIC_NAME}}\n" +
    "\t * @apiGroup {{CONTROLLER_NAME}}\n" +
    "\t * @apiVersion {{API_VERSION}}\n" +
    "\t * \n" +
    "{{PARAMS}} " +
    "\t * \n" +
    "\t */\n" +
    "\tvar delete_{{MODEL_NAME}} = function (user, body) {\n" +
    "\t\tif (!body.{{PRIMARY_KEY}}) {\n" +
    "\t\t\tthrow utiles.informError(400)\n" +
    "\t\t}\n" +
    "\t\treturn model_{{MODEL_NAME}}.delete(body,{{{PRIMARY_KEY}}:body.{{PRIMARY_KEY}}})\n" +
    "\t}";
var individiual_delete_map_template = "\tdeleteMap.set('{{PUBLIC_NAME}}', { method: delete_{{MODEL_NAME}}, permits: Permissions.{{DELETE_PERMISSION}} })";
var tables_template = "" +
    "if(!dmt){\n" +
    "\tvar dmt = {}\n" +
    "}\n" +
    "dmt.tables = {{TABLES}};\ntry {\n" +
    "\tmodule.exports = dmt;\n" +
    "} catch (e) {\n" +
    "\tconsole.log(e);\n" +
    "}\n";
var mySqlGen = function () {
    this.override = false
    this.parse = function (override) {
        this.override = override
        //Load file into database
        var tables = {};
        getTables(tables).then((promises) => {
            return Promise.all(promises)
        }).then((info) => {
            let str = tables_template.replace(new RegExp("{{TABLES}}", "g"), JSON.stringify(tables));
            fs.writeFileSync("./public/admin/tables.js", str);
            //check permissions
            return getEntities(tables);
        }).then(() => {
            return getControllers();
        }).catch((e) => {
            console.log(e);
        })
    };
    function getTables(tables) {
        var connection = mysql.createConnection(dbConf);
        var query = "SELECT TABLE_NAME,TABLE_TYPE FROM INFORMATION_SCHEMA.TABLES WHERE TABLE_SCHEMA = '" + dbConf.database + "';";
        return execQuery(query, connection).then((_tables) => {
            if (_tables.length === 0) {
                throw utiles.informError(300);
            }
            let promises = [];
            for (let i = 0; i < _tables.length; i++) {
                let table = _tables[i];
                if (table.TABLE_TYPE === "VIEW") {
                    continue
                }
                let table_name = table.TABLE_NAME;
                let module_name = table_name.charAt(0).toUpperCase() + table_name.slice(1);
                let info = model_template.replace(new RegExp("{{TABLE_NAME}}", 'g'), table_name);
                info = info.replace(new RegExp("{{MODULE_NAME}}", 'g'), module_name);
                let promise = describeTable(table, info, tables)
                promises.push(promise);
                promise.then((info) => {
                    let file_name = "./app/models/" + table_name + ".js"
                    let write = !fs.existsSync(file_name)
                    write = write || this.override
                    if (!write) {
                        console.log(file_name + " already exists")
                    } else {
                        fs.writeFileSync(file_name, info)
                    }
                    return write
                })
            }
            return promises;
        });
    };
    function describeTable(table, str, tables) {
        var connection = mysql.createConnection(dbConf);
        var query = "DESCRIBE " + table.TABLE_NAME;
        return execQuery(query, connection).then((info) => {
            let _table = {
                fields: []
            };
            function TypeTotype(Type) {
                return Type.indexOf("tinyint") != -1 ? "boolean" :
                    Type.indexOf("varchar") != -1 ? "string" :
                        Type.indexOf("text") != -1 ? "text" :
                            Type.indexOf("int") != -1 ? "int" :
                                Type.indexOf("date") != -1 ? "date" :
                                    Type.indexOf("datetime") != -1 ? "datetime" :
                                        Type.indexOf("timestamp") != -1 ? "datetime" :
                                            Type.indexOf("double") != -1 ? "number" :
                                                Type.indexOf("float") != -1 ? "number" : Type
            }
            info.forEach((f) => {
                if (f.Key === "PRI") {
                    _table.defaultSort = _table.defaultSort || f.Field;
                }
                _table.fields.push({
                    name: f.Field,
                    type: TypeTotype(f.Type.toLowerCase()),
                    disabled: f.Key === "PRI" || f.Type.indexOf("timestamp") != -1,
                    key: f.Key === "PRI"
                });
            })
            _table.defaultSort = _table.defaultSort || info[0].Field;
            tables[table.TABLE_NAME] = _table;
            str = str.replace(new RegExp('{{FIELDS}}', 'g'), JSON.stringify(info));
            return str;
        });
    }
    function execQuery(query, connection) {
        return new Promise((resolve, reject) => {
            if (config.verbose) console.log(query)
            connection.connect()
            connection.query(query, (err, result, fields) => {
                if (err) reject(err)
                else resolve(result)
            })
            connection.end({ timeout: 60000 });
        })
    }

    /**
     * Controllers
     */
    function getControllers() {
        let dmt_entities = require('../../public/admin/entities.js');
        let dmt_tables = require('../../public/admin/tables.js');
        let dmt_api = require('../../public/admin/api.js');
        let dmt = {
            entities: dmt_entities.entities,
            tables: dmt_tables.tables,
            api: dmt_api.api
        }

        dmt.api.endpoints.forEach((controller) => {
            let controller_name = controller.controller;
            let file_name = "./app/controllers/auto_" + controller.controller + ".js";
            if (fs.existsSync(file_name)) {
                console.log(file_name + " already exists")
            }
            let import_models = [];
            let models = [];
            let get_models = [];
            let get_maps = [];
            let post_models = [];
            let post_maps = [];
            let put_models = [];
            let put_maps = [];
            let delete_models = [];
            let delete_maps = [];

            controller.entities.forEach((endpoint) => {
                if (!endpoint.entity) {
                    return;
                }
                let prefix = ""
                let ety = dmt.entities[endpoint.entity]
                if (ety) {
                    prefix = "entity_"
                }

                function getEntityTable(entity) {
                    let table = null
                    let ety = dmt.entities[entity]
                    if (ety) {
                        table = dmt.tables[ety.table]
                    } else {
                        table = dmt.tables[entity]
                    }
                    return table
                }
                let table = getEntityTable(endpoint.entity)
                let str = null;
                if (!table) {
                    console.log(endpoint.entity)
                    return
                }
                function getEntityExample(entity, recursive) {
                    //console.log("parsing : " + entity )
                    recursive = recursive || false
                    let example = {}
                    let params = {}
                    let ety = dmt.entities[entity]
                    let table = getEntityTable(entity)
                    if (!table) {
                        console.log(ety)
                        return
                    }
                    function decodeType(f) {
                        return f.type.indexOf("int") != -1 ? "Number" :
                            f.type.indexOf("string") != -1 ? "String" :
                                f.type.indexOf("text") != -1 ? "Text" :
                                    f.type.indexOf("boolean") != -1 ? "Boolean" :
                                        f.type.indexOf("date") != -1 ? "Date" :
                                            f.type.indexOf("datetime") != -1 ? "DateTime" :
                                                f.type.indexOf("timestamp") != -1 ? "Number" :
                                                    f.type.indexOf("number") != -1 ? "Number" : ''
                    }
                    function exampleType(f) {
                        return f.type.indexOf("int") != -1 ? Math.ceil(Math.random() * 100) :
                            f.type.indexOf("string") != -1 ? "This is an example text" :
                                f.type.indexOf("text") != -1 ? "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sit amet tortor quis turpis cursus tristique." :
                                    f.type.indexOf("boolean") != -1 ? Math.random()>0.5 ? 1:0 :
                                        f.type.indexOf("date") != -1 ? "1969-05-20" :
                                            f.type.indexOf("datetime") != -1 ? "1969-05-20 13:05:01" :
                                                f.type.indexOf("timestamp") != -1 ? "946684800" :
                                                    f.type.indexOf("number") != -1 ? Math.ceil(Math.random() * 100) : ''
                    }
                    let pk = '';
                    let pk_type = '';

                    table.fields.forEach((f) => {
                        if (f.name === "password") {
                            return
                        }
                        let t = decodeType(f)
                        if (f.key) {
                            pk = f.name;
                            pk_type = t;
                        }
                        example[f.name] = exampleType(f)
                        params[f.name] = t
                    })
                    if (ety) {
                        if (ety.translate) {
                            let translate_table = dmt.tables[ety.translate_table]
                            translate_table.fields.forEach((f) => {
                                if (f.name === ety.translate.rightKey || f.name === "password") {
                                    return
                                }
                                example[f.name] = exampleType(f)
                                params[f.name] = t
                            })
                        }
                        /*if (ety.relations) {
                            ety.relations.forEach((relation) => {
                                let data = getEntityExample(relation.entity, false)
                                if (relation.type === "1-1") {
                                    delete example[relation.leftKey]
                                    example[relation.name] = data.example
                                    params[relation.name] = 'Object'
                                } else {
                                    if (recursive) {
                                        delete data.example[relation.rightKey]
                                        example[relation.name] = [data.example]
                                        params[relation.name] = 'Array'
                                    }
                                }
                            })
                        }*/
                    }

                    return {
                        example: example,
                        params: params,
                        pk: {
                            pk: pk,
                            pk_type: pk_type
                        }
                    }
                }

                import_models.push(individual_import_model.replace(new RegExp('{{MODEL_NAME}}', 'g'), prefix + endpoint.entity))
                models.push(individual_model.replace(new RegExp('{{MODEL_NAME}}', 'g'), prefix + endpoint.entity))
                
                let doc_data = getEntityExample(endpoint.entity, false)
                let get_response = JSON.stringify(doc_data.example, null, '\t')
                get_response = get_response.split('\n').join('\n\t *\t')

                let params = ''
                for (let i in doc_data.params) {
                    params += `\t * @apiParam {${doc_data.params[i]}} ${i} \n`
                }

                let get = individiual_get_method_template.replace(new RegExp('{{MODEL_NAME}}', 'g'), prefix + endpoint.entity)
                get = get.replace(new RegExp('{{CONTROLLER_NAME}}', 'g'), controller_name)
                if (doc_data.pk.pk_type === '') {
                    console.log(doc_data.pk.pk);
                    get = get.replace(new RegExp('{{PRIMARY_PARAMS}}', 'g'), '')
                } else {
                    get = get.replace(new RegExp('{{PRIMARY_PARAMS}}', 'g'), '\t * @apiParam {' + doc_data.pk.pk_type + '} ' + doc_data.pk.pk + ' ' + endpoint.entity + ' unique ID.\n')
                }
                get = get.replace(new RegExp('{{RESPONSE_DATA}}', 'g'), get_response)
                get = get.replace(new RegExp('{{PUBLIC_NAME}}', 'g'), endpoint.entity)
                get = get.replace(new RegExp('{{API_VERSION}}', 'g'), config.version)

                get_models.push(get);
                str = individiual_get_map_template.replace(new RegExp('{{MODEL_NAME}}', 'g'), prefix + endpoint.entity)
                str = str.replace(new RegExp('{{GET_PERMISSION}}', 'g'), endpoint.permissions.read.toUpperCase())
                get_maps.push(str.replace(new RegExp('{{PUBLIC_NAME}}', 'g'), endpoint.entity))

                let post = individiual_create_method_template.replace(new RegExp('{{MODEL_NAME}}', 'g'), prefix + endpoint.entity)
                post = post.replace(new RegExp('{{CONTROLLER_NAME}}', 'g'), controller_name)
                post = post.replace(new RegExp('{{PARAMS}}', 'g'), params)
                post = post.replace(new RegExp('{{PUBLIC_NAME}}', 'g'), endpoint.entity)
                post = post.replace(new RegExp('{{API_VERSION}}', 'g'), config.version)

                post_models.push(post)
                str = individiual_create_map_template.replace(new RegExp('{{MODEL_NAME}}', 'g'), prefix + endpoint.entity)
                str = str.replace(new RegExp('{{POST_PERMISSION}}', 'g'), endpoint.permissions.write.toUpperCase())
                post_maps.push(str.replace(new RegExp('{{PUBLIC_NAME}}', 'g'), endpoint.entity))

                let update = individiual_update_method_template.replace(new RegExp('{{MODEL_NAME}}', 'g'), prefix + endpoint.entity)
                update = update.replace(new RegExp('{{CONTROLLER_NAME}}', 'g'), controller_name)
                update = update.replace(new RegExp('{{PRIMARY_KEY}}', 'g'), table.defaultSort)
                update = update.replace(new RegExp('{{PARAMS}}', 'g'), params)
                update = update.replace(new RegExp('{{PUBLIC_NAME}}', 'g'), endpoint.entity)
                update = update.replace(new RegExp('{{API_VERSION}}', 'g'), config.version)

                put_models.push(update);
                str = individiual_update_map_template.replace(new RegExp('{{MODEL_NAME}}', 'g'), prefix + endpoint.entity)
                str = str.replace(new RegExp('{{PUT_PERMISSION}}', 'g'), endpoint.permissions.update.toUpperCase())
                put_maps.push(str.replace(new RegExp('{{PUBLIC_NAME}}', 'g'), endpoint.entity))

                let _delete = individiual_delete_method_template.replace(new RegExp('{{MODEL_NAME}}', 'g'), prefix + endpoint.entity)
                _delete = _delete.replace(new RegExp('{{CONTROLLER_NAME}}', 'g'), controller_name)
                _delete = _delete.replace(new RegExp('{{PRIMARY_KEY}}', 'g'), table.defaultSort)
                _delete = _delete.replace(new RegExp('{{PARAMS}}', 'g'), params)
                _delete = _delete.replace(new RegExp('{{PUBLIC_NAME}}', 'g'), endpoint.entity)
                _delete = _delete.replace(new RegExp('{{API_VERSION}}', 'g'), config.version)

                delete_models.push(_delete);
                str = individiual_delete_map_template.replace(new RegExp('{{MODEL_NAME}}', 'g'), prefix + endpoint.entity)
                str = str.replace(new RegExp('{{DELETE_PERMISSION}}', 'g'), endpoint.permissions.delete.toUpperCase())
                delete_maps.push(str.replace(new RegExp('{{PUBLIC_NAME}}', 'g'), endpoint.entity))
            });
            let ctrl = controller_template.replace(new RegExp('{{CONTROLLER_NAME}}', 'g'), controller_name)
            ctrl = ctrl.replace(new RegExp('{{IMPORT_MODELS}}', 'g'), import_models.join('\n'))
            ctrl = ctrl.replace(new RegExp('{{MODELS}}', 'g'), models.join('\n'))
            ctrl = ctrl.replace(new RegExp('{{GET_METHODS}}', 'g'), get_models.join('\n'))
            ctrl = ctrl.replace(new RegExp('{{GET_MAP}}', 'g'), get_maps.join('\n'))
            ctrl = ctrl.replace(new RegExp('{{POST_METHODS}}', 'g'), post_models.join('\n'))
            ctrl = ctrl.replace(new RegExp('{{POST_MAP}}', 'g'), post_maps.join('\n'))
            ctrl = ctrl.replace(new RegExp('{{PUT_METHODS}}', 'g'), put_models.join('\n'))
            ctrl = ctrl.replace(new RegExp('{{PUT_MAP}}', 'g'), put_maps.join('\n'))
            ctrl = ctrl.replace(new RegExp('{{DELETE_METHODS}}', 'g'), delete_models.join('\n'))
            ctrl = ctrl.replace(new RegExp('{{DELETE_MAP}}', 'g'), delete_maps.join('\n'))
            
            let write = !fs.existsSync(file_name)
            write = write || this.override
            if (!write) {
                console.log(file_name + " already exists")
            } else {
                fs.writeFileSync(file_name, ctrl)
            }
        });
    }

    /**
     * Entities
     */
    function getEntityMainTable(entities, name) {
        let ety = entities[name]
        if (ety) {
            return ety.table
        } else {
            return name
        }
    }
    function getEntities(tables) {
        let dmt = require('../../public/admin/entities.js');
        let permissions = [];
        for (let i in dmt.entities) {
            let entity = dmt.entities[i];
            entity.entity = i
            entity.model = "entity"
            let module_name = i.charAt(0).toUpperCase() + i.slice(1);
            let str = entity_template.replace(new RegExp('{{ENTITY}}', 'g'), JSON.stringify(entity));
            str = str.replace(new RegExp('{{MODULE_NAME}}', 'g'), module_name);
            let file_name = "./app/models/entity_" + i + ".js"
            let write = !fs.existsSync(file_name)
            write = write || this.override
            if (!write) {
                console.log(file_name + " already exists")
            } else {
                fs.writeFileSync(file_name, str)
            }
            let model = new (require('../models/entity_' + i + '.js'))();
            model.updateView()
        };
    }
};

module.exports = mySqlGen;
