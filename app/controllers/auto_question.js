/**  * CONTROLLER AUTO_GENERATED BY DMT-GENERATOR
 * question
 * DMT 2017
 * GENERATED: 13 / 7 / 2017 - 13:17:41
 **/
var BaseController = require('../utils/controller.js')
var util = require('util');
var utiles = require('../utils/utiles.js')
var Errors = require('../utils/errors.js')
var Permissions = require('../utils/permissions.js')
var Auth_ctrl = require('./auth.js')
var entity_evaluation_request = require('../models/entity_evaluation_request.js')
var entity_user_answer = require('../models/entity_user_answer.js')
var request_status = require('../models/request_status.js')
var question_controller = function () {
	var model_entity_evaluation_request = new entity_evaluation_request()
	var model_entity_user_answer = new entity_user_answer()
	var model_request_status = new request_status()
	//---------------------------------------------------------------
	var getMap = new Map(), postMap = new Map(), putMap = new Map(), deleteMap = new Map()
	var _get = function(model,user,params){
		let key = model.getPrimaryKey()
		if (params.filter_field) {
			if (typeof params.filter_field == 'string') {
				params.filter_field = [params.filter_field]
				params.filter_value = [params.filter_value]
			}
		} else {
			params.filter_field = []
			params.filter_value = []
		}
		if (params[key]) {
			params.filter_field.push(key)
			params.filter_value.push(params[key])
		}
		return model.getAll({
			filter: params.filter,
			limit: params.limit,
			page: params.page,
			order: params.order,
			filter_fields: params.filter_field,
			filter_values: params.filter_value,
			fields: params.field,
			lang: params.lang
		})
	}
	/**
	 * @api {get} api/question/evaluation_request Request evaluation_request information
	 * @apiName Getevaluation_request
	 * @apiGroup question
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id evaluation_request unique ID.
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"id": 78,
	 *		"timestamp": "1969-05-20",
	 *		"result": 1,
	 *		"user": {
	 *			"id": 38,
	 *			"picture": "This is an example text",
	 *			"name": "This is an example text",
	 *			"secondname": "This is an example text",
	 *			"lastname": "This is an example text",
	 *			"secondlastname": "This is an example text",
	 *			"email": "This is an example text",
	 *			"phone": "This is an example text",
	 *			"extension": "This is an example text",
	 *			"mobile": "This is an example text",
	 *			"active": 0,
	 *			"verified": 1,
	 *			"tmp_pwd": 1,
	 *			"flag_hall": 0,
	 *			"ranking_hall": 24,
	 *			"terms": 0,
	 *			"newsletter": 1,
	 *			"timestamp": "1969-05-20",
	 *			"id_type_document": 87,
	 *			"availability": {
	 *				"id": 45,
	 *				"name": "This is an example text"
	 *			},
	 *			"level": {
	 *				"id": 69,
	 *				"name": "This is an example text"
	 *			},
	 *			"city": {
	 *				"id": 8,
	 *				"name": "This is an example text",
	 *				"code": "This is an example text",
	 *				"latitude": 83,
	 *				"longitude": 27,
	 *				"region": {
	 *					"id": 36,
	 *					"name": "This is an example text",
	 *					"id_capital": 21,
	 *					"code": "This is an example text"
	 *				}
	 *			}
	 *		},
	 *		"service": {
	 *			"id": 85,
	 *			"name": "This is an example text",
	 *			"url": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sit amet tortor quis turpis cursus tristique.",
	 *			"id_user": 26,
	 *			"hash": "This is an example text",
	 *			"rate": 65,
	 *			"test_user": "This is an example text",
	 *			"test_password": "This is an example text",
	 *			"is_product": 1,
	 *			"is_service": 1,
	 *			"timestamp": "1969-05-20",
	 *			"category": {
	 *				"id": 63,
	 *				"name": "This is an example text"
	 *			},
	 *			"institution": {
	 *				"id": 10,
	 *				"name": "This is an example text",
	 *				"nit": "This is an example text",
	 *				"address": "This is an example text",
	 *				"website": "This is an example text",
	 *				"email": "This is an example text",
	 *				"second_email": "This is an example text",
	 *				"phone": "This is an example text",
	 *				"head_sector": 1,
	 *				"timestamp": "1969-05-20",
	 *				"designation_act": "This is an example text",
	 *				"legalrep_name": "This is an example text",
	 *				"legalrep_secondname": "This is an example text",
	 *				"legalrep_lastname": "This is an example text",
	 *				"legalrep_secondlastname": "This is an example text",
	 *				"leaglrep_document": "This is an example text",
	 *				"legalrep_typedoc": 43,
	 *				"legalrep_email": "This is an example text",
	 *				"flag_hall": 0,
	 *				"ranking_hall": 4,
	 *				"city": {
	 *					"id": 6,
	 *					"name": "This is an example text",
	 *					"code": "This is an example text",
	 *					"latitude": 5,
	 *					"longitude": 35,
	 *					"region": {
	 *						"id": 26,
	 *						"name": "This is an example text",
	 *						"id_capital": 43,
	 *						"code": "This is an example text"
	 *					}
	 *				},
	 *				"region": {
	 *					"id": 99,
	 *					"name": "This is an example text",
	 *					"id_capital": 86,
	 *					"code": "This is an example text"
	 *				},
	 *				"creator": {
	 *					"id": 3,
	 *					"picture": "This is an example text",
	 *					"name": "This is an example text",
	 *					"secondname": "This is an example text",
	 *					"lastname": "This is an example text",
	 *					"secondlastname": "This is an example text",
	 *					"email": "This is an example text",
	 *					"phone": "This is an example text",
	 *					"extension": "This is an example text",
	 *					"mobile": "This is an example text",
	 *					"active": 1,
	 *					"verified": 0,
	 *					"tmp_pwd": 0,
	 *					"flag_hall": 1,
	 *					"ranking_hall": 88,
	 *					"terms": 0,
	 *					"newsletter": 1,
	 *					"timestamp": "1969-05-20",
	 *					"id_type_document": 11,
	 *					"availability": {
	 *						"id": 81,
	 *						"name": "This is an example text"
	 *					},
	 *					"level": {
	 *						"id": 22,
	 *						"name": "This is an example text"
	 *					},
	 *					"city": {
	 *						"id": 88,
	 *						"name": "This is an example text",
	 *						"code": "This is an example text",
	 *						"latitude": 81,
	 *						"longitude": 64,
	 *						"region": {
	 *							"id": 56,
	 *							"name": "This is an example text",
	 *							"id_capital": 77,
	 *							"code": "This is an example text"
	 *						}
	 *					}
	 *				}
	 *			},
	 *			"status": {
	 *				"id": 89,
	 *				"name": "This is an example text"
	 *			}
	 *		},
	 *		"status": {
	 *			"id": 7,
	 *			"name": "This is an example text"
	 *		},
	 *		"answer": {
	 *			"id": 22,
	 *			"id_answer": 25,
	 *			"datetime": "1969-05-20",
	 *			"timestamp": "1969-05-20",
	 *			"requisite": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sit amet tortor quis turpis cursus tristique.",
	 *			"support_legal": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sit amet tortor quis turpis cursus tristique.",
	 *			"justifiaction": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sit amet tortor quis turpis cursus tristique.",
	 *			"evidence": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sit amet tortor quis turpis cursus tristique.",
	 *			"help": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sit amet tortor quis turpis cursus tristique.",
	 *			"id_service": 93,
	 *			"question": {
	 *				"id": 65,
	 *				"text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sit amet tortor quis turpis cursus tristique.",
	 *				"id_type": 63,
	 *				"id_topic": 81,
	 *				"id_form": 64
	 *			},
	 *			"user": {
	 *				"id": 82,
	 *				"picture": "This is an example text",
	 *				"name": "This is an example text",
	 *				"secondname": "This is an example text",
	 *				"lastname": "This is an example text",
	 *				"secondlastname": "This is an example text",
	 *				"email": "This is an example text",
	 *				"phone": "This is an example text",
	 *				"extension": "This is an example text",
	 *				"mobile": "This is an example text",
	 *				"active": 1,
	 *				"verified": 1,
	 *				"tmp_pwd": 0,
	 *				"flag_hall": 1,
	 *				"ranking_hall": 7,
	 *				"terms": 1,
	 *				"newsletter": 1,
	 *				"timestamp": "1969-05-20",
	 *				"id_type_document": 27,
	 *				"availability": {
	 *					"id": 34,
	 *					"name": "This is an example text"
	 *				},
	 *				"level": {
	 *					"id": 7,
	 *					"name": "This is an example text"
	 *				},
	 *				"city": {
	 *					"id": 39,
	 *					"name": "This is an example text",
	 *					"code": "This is an example text",
	 *					"latitude": 81,
	 *					"longitude": 12,
	 *					"region": {
	 *						"id": 20,
	 *						"name": "This is an example text",
	 *						"id_capital": 38,
	 *						"code": "This is an example text"
	 *					}
	 *				}
	 *			},
	 *			"media": {
	 *				"id": 49,
	 *				"url": "This is an example text",
	 *				"type": 1,
	 *				"timestamp": "1969-05-20"
	 *			},
	 *			"topic": {
	 *				"id": 26,
	 *				"name": "This is an example text"
	 *			}
	 *		}
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_entity_evaluation_request = function (user, params) {
		return _get(model_entity_evaluation_request,user,params)
	}
	/**
	 * @api {get} api/question/user_answer Request user_answer information
	 * @apiName Getuser_answer
	 * @apiGroup question
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id user_answer unique ID.
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"id": 54,
	 *		"id_answer": 67,
	 *		"datetime": "1969-05-20",
	 *		"timestamp": "1969-05-20",
	 *		"requisite": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sit amet tortor quis turpis cursus tristique.",
	 *		"support_legal": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sit amet tortor quis turpis cursus tristique.",
	 *		"justifiaction": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sit amet tortor quis turpis cursus tristique.",
	 *		"evidence": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sit amet tortor quis turpis cursus tristique.",
	 *		"help": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sit amet tortor quis turpis cursus tristique.",
	 *		"id_service": 1,
	 *		"question": {
	 *			"id": 13,
	 *			"text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sit amet tortor quis turpis cursus tristique.",
	 *			"id_type": 33,
	 *			"id_topic": 72,
	 *			"id_form": 15
	 *		},
	 *		"user": {
	 *			"id": 59,
	 *			"picture": "This is an example text",
	 *			"name": "This is an example text",
	 *			"secondname": "This is an example text",
	 *			"lastname": "This is an example text",
	 *			"secondlastname": "This is an example text",
	 *			"email": "This is an example text",
	 *			"phone": "This is an example text",
	 *			"extension": "This is an example text",
	 *			"mobile": "This is an example text",
	 *			"active": 1,
	 *			"verified": 0,
	 *			"tmp_pwd": 0,
	 *			"flag_hall": 1,
	 *			"ranking_hall": 100,
	 *			"terms": 0,
	 *			"newsletter": 0,
	 *			"timestamp": "1969-05-20",
	 *			"id_type_document": 87,
	 *			"availability": {
	 *				"id": 52,
	 *				"name": "This is an example text"
	 *			},
	 *			"level": {
	 *				"id": 9,
	 *				"name": "This is an example text"
	 *			},
	 *			"city": {
	 *				"id": 47,
	 *				"name": "This is an example text",
	 *				"code": "This is an example text",
	 *				"latitude": 76,
	 *				"longitude": 51,
	 *				"region": {
	 *					"id": 10,
	 *					"name": "This is an example text",
	 *					"id_capital": 43,
	 *					"code": "This is an example text"
	 *				}
	 *			}
	 *		},
	 *		"media": {
	 *			"id": 43,
	 *			"url": "This is an example text",
	 *			"type": 1,
	 *			"timestamp": "1969-05-20"
	 *		},
	 *		"topic": {
	 *			"id": 83,
	 *			"name": "This is an example text"
	 *		}
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_entity_user_answer = function (user, params) {
		return _get(model_entity_user_answer,user,params)
	}
	/**
	 * @api {get} api/question/request_status Request request_status information
	 * @apiName Getrequest_status
	 * @apiGroup question
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id request_status unique ID.
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"id": 87,
	 *		"name": "This is an example text"
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_request_status = function (user, params) {
		return _get(model_request_status,user,params)
	}
	getMap.set('evaluation_request', { method: get_entity_evaluation_request, permits: Permissions.NONE })
	getMap.set('user_answer', { method: get_entity_user_answer, permits: Permissions.NONE })
	getMap.set('request_status', { method: get_request_status, permits: Permissions.NONE })
	/**
	 * @api {post} api/question/evaluation_request Create evaluation_request information
	 * @apiName Postevaluation_request
	 * @apiGroup question
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {Number} id_user 
	 * @apiParam {Number} id_user_answer 
	 * @apiParam {Number} id_service 
	 * @apiParam {Number} id_request_status 
	 * @apiParam {Date} timestamp 
	 * @apiParam {Boolean} result 
	 * @apiParam {Object} user 
	 * @apiParam {Object} service 
	 * @apiParam {Object} status 
	 * @apiParam {Object} answer 
 	 * 
	 */
	var create_entity_evaluation_request = function (user, body) {
		return model_entity_evaluation_request.create(body)
	}
	/**
	 * @api {post} api/question/user_answer Create user_answer information
	 * @apiName Postuser_answer
	 * @apiGroup question
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {Number} id_answer 
	 * @apiParam {Number} id_question 
	 * @apiParam {Number} id_user 
	 * @apiParam {Date} datetime 
	 * @apiParam {Number} id_media 
	 * @apiParam {Date} timestamp 
	 * @apiParam {Text} requisite 
	 * @apiParam {Text} support_legal 
	 * @apiParam {Text} justifiaction 
	 * @apiParam {Number} id_topic 
	 * @apiParam {Text} evidence 
	 * @apiParam {Text} help 
	 * @apiParam {Number} id_service 
	 * @apiParam {Object} question 
	 * @apiParam {Object} user 
	 * @apiParam {Object} media 
	 * @apiParam {Object} topic 
 	 * 
	 */
	var create_entity_user_answer = function (user, body) {
		return model_entity_user_answer.create(body)
	}
	/**
	 * @api {post} api/question/request_status Create request_status information
	 * @apiName Postrequest_status
	 * @apiGroup question
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var create_request_status = function (user, body) {
		return model_request_status.create(body)
	}
	postMap.set('evaluation_request', { method: create_entity_evaluation_request, permits: Permissions.ADMIN })
	postMap.set('user_answer', { method: create_entity_user_answer, permits: Permissions.ADMIN })
	postMap.set('request_status', { method: create_request_status, permits: Permissions.ADMIN })
	/**
	 * @api {put} api/question/evaluation_request Update evaluation_request information
	 * @apiName Putevaluation_request
	 * @apiGroup question
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {Number} id_user 
	 * @apiParam {Number} id_user_answer 
	 * @apiParam {Number} id_service 
	 * @apiParam {Number} id_request_status 
	 * @apiParam {Date} timestamp 
	 * @apiParam {Boolean} result 
	 * @apiParam {Object} user 
	 * @apiParam {Object} service 
	 * @apiParam {Object} status 
	 * @apiParam {Object} answer 
 	 * 
	 */
	var update_entity_evaluation_request = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_entity_evaluation_request.update(body,{id:body.id})
	}
	/**
	 * @api {put} api/question/user_answer Update user_answer information
	 * @apiName Putuser_answer
	 * @apiGroup question
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {Number} id_answer 
	 * @apiParam {Number} id_question 
	 * @apiParam {Number} id_user 
	 * @apiParam {Date} datetime 
	 * @apiParam {Number} id_media 
	 * @apiParam {Date} timestamp 
	 * @apiParam {Text} requisite 
	 * @apiParam {Text} support_legal 
	 * @apiParam {Text} justifiaction 
	 * @apiParam {Number} id_topic 
	 * @apiParam {Text} evidence 
	 * @apiParam {Text} help 
	 * @apiParam {Number} id_service 
	 * @apiParam {Object} question 
	 * @apiParam {Object} user 
	 * @apiParam {Object} media 
	 * @apiParam {Object} topic 
 	 * 
	 */
	var update_entity_user_answer = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_entity_user_answer.update(body,{id:body.id})
	}
	/**
	 * @api {put} api/question/request_status Update request_status information
	 * @apiName Putrequest_status
	 * @apiGroup question
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var update_request_status = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_request_status.update(body,{id:body.id})
	}
	putMap.set('evaluation_request', { method: update_entity_evaluation_request, permits: Permissions.ADMIN })
	putMap.set('user_answer', { method: update_entity_user_answer, permits: Permissions.ADMIN })
	putMap.set('request_status', { method: update_request_status, permits: Permissions.ADMIN })
	/**
	 * @api {delete} api/question/evaluation_request Delete evaluation_request information
	 * @apiName Deleteevaluation_request
	 * @apiGroup question
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {Number} id_user 
	 * @apiParam {Number} id_user_answer 
	 * @apiParam {Number} id_service 
	 * @apiParam {Number} id_request_status 
	 * @apiParam {Date} timestamp 
	 * @apiParam {Boolean} result 
	 * @apiParam {Object} user 
	 * @apiParam {Object} service 
	 * @apiParam {Object} status 
	 * @apiParam {Object} answer 
 	 * 
	 */
	var delete_entity_evaluation_request = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_entity_evaluation_request.delete(body,{id:body.id})
	}
	/**
	 * @api {delete} api/question/user_answer Delete user_answer information
	 * @apiName Deleteuser_answer
	 * @apiGroup question
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {Number} id_answer 
	 * @apiParam {Number} id_question 
	 * @apiParam {Number} id_user 
	 * @apiParam {Date} datetime 
	 * @apiParam {Number} id_media 
	 * @apiParam {Date} timestamp 
	 * @apiParam {Text} requisite 
	 * @apiParam {Text} support_legal 
	 * @apiParam {Text} justifiaction 
	 * @apiParam {Number} id_topic 
	 * @apiParam {Text} evidence 
	 * @apiParam {Text} help 
	 * @apiParam {Number} id_service 
	 * @apiParam {Object} question 
	 * @apiParam {Object} user 
	 * @apiParam {Object} media 
	 * @apiParam {Object} topic 
 	 * 
	 */
	var delete_entity_user_answer = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_entity_user_answer.delete(body,{id:body.id})
	}
	/**
	 * @api {delete} api/question/request_status Delete request_status information
	 * @apiName Deleterequest_status
	 * @apiGroup question
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var delete_request_status = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_request_status.delete(body,{id:body.id})
	}
	deleteMap.set('evaluation_request', { method: delete_entity_evaluation_request, permits: Permissions.ADMIN })
	deleteMap.set('user_answer', { method: delete_entity_user_answer, permits: Permissions.ADMIN })
	deleteMap.set('request_status', { method: delete_request_status, permits: Permissions.ADMIN })
	var params = [getMap, postMap, putMap, deleteMap]
	BaseController.apply(this, params)
	//---------------------------------------------------------------
	return this;
}
util.inherits(question_controller, BaseController)
module.exports = question_controller