/**  * CONTROLLER AUTO_GENERATED BY DMT-GENERATOR
 * question
 * DMT 2017
 * GENERATED: 21 / 8 / 2017 - 6:57:49
 **/
var BaseController = require('../utils/controller.js')
var util = require('util');
var utiles = require('../utils/utiles.js')
var Errors = require('../utils/errors.js')
var Permissions = require('../utils/permissions.js')
var Auth_ctrl = require('./auth.js')
var entity_evaluation_request = require('../models/entity_evaluation_request.js')
var entity_user_answer = require('../models/entity_user_answer.js')
var request_status = require('../models/request_status.js')
var evaluation_request = require('../models/evaluation_request.js')
var entity_service = require('../models/entity_service.js')
var questions = require('../models/question.js')
var question_controller = function () {
	var model_entity_evaluation_request = new entity_evaluation_request()
	var model_entity_user_answer = new entity_user_answer()
	var model_request_status = new request_status()
	var model_evaluation_request = new evaluation_request()
	var model_entity_service = new entity_service()
	var model_questions = new questions()
	//---------------------------------------------------------------
	var getMap = new Map(), postMap = new Map(), putMap = new Map(), deleteMap = new Map()
	var _get = function(model,user,params){
		let key = model.getPrimaryKey()
		if (params.filter_field) {
			if (typeof params.filter_field == 'string') {
				params.filter_field = [params.filter_field]
				params.filter_value = [params.filter_value]
			}
		} else {
			params.filter_field = []
			params.filter_value = []
		}
		if (params[key]) {
			params.filter_field.push(key)
			params.filter_value.push(params[key])
		}
		return model.getAll({
			filter: params.filter,
			limit: params.limit,
			page: params.page,
			order: params.order,
			filter_fields: params.filter_field,
			filter_values: params.filter_value,
			fields: params.field,
			lang: params.lang
		})
	}
	/**
	 * @api {get} api/question/evaluation_request Request evaluation_request information
	 * @apiName Getevaluation_request
	 * @apiGroup question
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id evaluation_request unique ID.
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"id": 72,
	 *		"id_question": 57,
	 *		"timestamp": "1969-05-20",
	 *		"result": 1,
	 *		"branch": 42,
	 *		"justify_reject": "This is an example text",
	 *		"alert_time": "1969-05-20",
	 *		"end_time": "1969-05-20",
	 *		"user": {
	 *			"id": 14,
	 *			"picture": "This is an example text",
	 *			"name": "This is an example text",
	 *			"secondname": "This is an example text",
	 *			"lastname": "This is an example text",
	 *			"secondlastname": "This is an example text",
	 *			"email": "This is an example text",
	 *			"phone": "This is an example text",
	 *			"extension": "This is an example text",
	 *			"mobile": "This is an example text",
	 *			"organization": "This is an example text",
	 *			"ocupation": "This is an example text",
	 *			"education_level": "This is an example text",
	 *			"tmp_pwd": 0,
	 *			"points": 34,
	 *			"active": 0,
	 *			"verified": 0,
	 *			"terms": 1,
	 *			"newsletter": 1,
	 *			"timestamp": "1969-05-20",
	 *			"id_region": 18,
	 *			"id_country": 21,
	 *			"document": "This is an example text",
	 *			"availability": {
	 *				"id": 73,
	 *				"name": "This is an example text"
	 *			},
	 *			"city": {
	 *				"id": 85,
	 *				"name": "This is an example text",
	 *				"code": "This is an example text",
	 *				"latitude": 5,
	 *				"longitude": 63,
	 *				"region": {
	 *					"id": 88,
	 *					"name": "This is an example text",
	 *					"id_capital": 99,
	 *					"id_country": 21,
	 *					"code": "This is an example text"
	 *				}
	 *			},
	 *			"type_document": {
	 *				"id": 21,
	 *				"name": "This is an example text"
	 *			}
	 *		},
	 *		"service": {
	 *			"id": 91,
	 *			"name": "This is an example text",
	 *			"url": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sit amet tortor quis turpis cursus tristique.",
	 *			"id_user": 1,
	 *			"hash": "This is an example text",
	 *			"rate": 85,
	 *			"test_user": "This is an example text",
	 *			"test_password": "This is an example text",
	 *			"is_active": 0,
	 *			"is_product": 1,
	 *			"is_service": 1,
	 *			"timestamp": "1969-05-20",
	 *			"datetime": "1969-05-20",
	 *			"category": {
	 *				"id": 61,
	 *				"name": "This is an example text"
	 *			},
	 *			"institution": {
	 *				"id": 42,
	 *				"name": "This is an example text",
	 *				"nit": "This is an example text",
	 *				"address": "This is an example text",
	 *				"website": "This is an example text",
	 *				"email": "This is an example text",
	 *				"second_email": "This is an example text",
	 *				"phone": "This is an example text",
	 *				"extension_phone": "This is an example text",
	 *				"head_sector": 0,
	 *				"timestamp": "1969-05-20",
	 *				"designation_act": "This is an example text",
	 *				"legalrep_name": "This is an example text",
	 *				"legalrep_secondname": "This is an example text",
	 *				"legalrep_lastname": "This is an example text",
	 *				"legalrep_secondlastname": "This is an example text",
	 *				"legalrep_document": "This is an example text",
	 *				"legalrep_typedoc": 74,
	 *				"legalrep_email": "This is an example text",
	 *				"legalrep_phone": "This is an example text",
	 *				"legalrep_mobile": "This is an example text",
	 *				"id_country": 39,
	 *				"city": {
	 *					"id": 63,
	 *					"name": "This is an example text",
	 *					"code": "This is an example text",
	 *					"latitude": 48,
	 *					"longitude": 19,
	 *					"region": {
	 *						"id": 76,
	 *						"name": "This is an example text",
	 *						"id_capital": 20,
	 *						"id_country": 46,
	 *						"code": "This is an example text"
	 *					}
	 *				},
	 *				"region": {
	 *					"id": 64,
	 *					"name": "This is an example text",
	 *					"id_capital": 50,
	 *					"id_country": 1,
	 *					"code": "This is an example text"
	 *				},
	 *				"creator": {
	 *					"id": 10,
	 *					"name": "This is an example text"
	 *				}
	 *			},
	 *			"status": {
	 *				"id": 42,
	 *				"name": "This is an example text",
	 *				"duration": 47,
	 *				"pre_end": 37,
	 *				"alert": 1
	 *			}
	 *		},
	 *		"status": {
	 *			"id": 45,
	 *			"name": "This is an example text"
	 *		}
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_entity_evaluation_request = function (user, params) {
		return _get(model_entity_evaluation_request,user,params)
	}
	/**
	 * @api {get} api/question/user_answer Request user_answer information
	 * @apiName Getuser_answer
	 * @apiGroup question
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id user_answer unique ID.
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"id": 80,
	 *		"id_service": 23,
	 *		"id_status": 13,
	 *		"comment": "This is an example text",
	 *		"datetime": "1969-05-20",
	 *		"timestamp": "1969-05-20",
	 *		"requisite": "This is an example text",
	 *		"support_legal": "This is an example text",
	 *		"justification": "This is an example text",
	 *		"evidence": "This is an example text",
	 *		"help": "This is an example text",
	 *		"alert": 1,
	 *		"question": {
	 *			"id": 68,
	 *			"id_topic": 94,
	 *			"level": 55,
	 *			"text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sit amet tortor quis turpis cursus tristique.",
	 *			"criteria": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sit amet tortor quis turpis cursus tristique.",
	 *			"evidence": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sit amet tortor quis turpis cursus tristique.",
	 *			"legal_support": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sit amet tortor quis turpis cursus tristique.",
	 *			"help": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sit amet tortor quis turpis cursus tristique."
	 *		},
	 *		"user": {
	 *			"id": 46,
	 *			"picture": "This is an example text",
	 *			"name": "This is an example text",
	 *			"secondname": "This is an example text",
	 *			"lastname": "This is an example text",
	 *			"secondlastname": "This is an example text",
	 *			"email": "This is an example text",
	 *			"phone": "This is an example text",
	 *			"extension": "This is an example text",
	 *			"mobile": "This is an example text",
	 *			"organization": "This is an example text",
	 *			"ocupation": "This is an example text",
	 *			"education_level": "This is an example text",
	 *			"tmp_pwd": 1,
	 *			"points": 94,
	 *			"active": 1,
	 *			"verified": 1,
	 *			"terms": 1,
	 *			"newsletter": 0,
	 *			"timestamp": "1969-05-20",
	 *			"id_region": 24,
	 *			"id_country": 33,
	 *			"document": "This is an example text",
	 *			"availability": {
	 *				"id": 32,
	 *				"name": "This is an example text"
	 *			},
	 *			"city": {
	 *				"id": 80,
	 *				"name": "This is an example text",
	 *				"code": "This is an example text",
	 *				"latitude": 74,
	 *				"longitude": 44,
	 *				"region": {
	 *					"id": 56,
	 *					"name": "This is an example text",
	 *					"id_capital": 66,
	 *					"id_country": 12,
	 *					"code": "This is an example text"
	 *				}
	 *			},
	 *			"type_document": {
	 *				"id": 94,
	 *				"name": "This is an example text"
	 *			}
	 *		},
	 *		"media": {
	 *			"id": 15,
	 *			"url": "This is an example text",
	 *			"type": "This is an example text",
	 *			"timestamp": "1969-05-20"
	 *		},
	 *		"topic": {
	 *			"id": 32,
	 *			"name": "This is an example text",
	 *			"id_usertype": 81,
	 *			"id_category": 36
	 *		}
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_entity_user_answer = function (user, params) {
		return _get(model_entity_user_answer,user,params)
	}
	/**
	 * @api {get} api/question/request_status Request request_status information
	 * @apiName Getrequest_status
	 * @apiGroup question
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id request_status unique ID.
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"id": 69,
	 *		"name": "This is an example text"
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_request_status = function (user, params) {
		return _get(model_request_status,user,params)
	}

	var get_requirements_from_category_level_create_service = function (user, params) {
		var query = `
SELECT 
q.id AS id_question,
q.id_topic,
q.level,
q.text AS requisite,
q.criteria,
q.evidence,
q.legal_support,
q.help
FROM stamp.question AS q
JOIN stamp.questiontopic AS qt ON qt.id = q.id_topic
WHERE qt.id_category = ${params.id_category}
AND q.level <= ${params.level}
ORDER BY q.id
;`
		return model_entity_service.customQuery(query)
	}

	var list_empty_user_answers = function (user, body) {
		var query = `
			SELECT 
			ua.id_question AS id_question,
			ua.id_service AS id_service,
			q.*
			FROM stamp.user_answer AS ua
			JOIN stamp.question AS q ON q.id = ua.id_question
			WHERE ua.id_media IS NULL
			AND ua.id_service = ${body.id_service};
		`
		return model_entity_service.customQuery(query)
	}

	var get_filtered_list_requirements = function (user, params) {
		var query = `SELECT stamp.institution.name AS name, stamp.service.name AS service_name, stamp.service.url AS url, stamp.service.timestamp as publication_date
FROM stamp.institution JOIN stamp.service ON stamp.institution.id = stamp.service.id_institution\nWHERE `
		// Add category filter
		// TODO: Verify or inform the order of the tabs ids in the mokup
		switch(params.id_category) {
			case '1': // Tramites o servicios en linea
				query += 'stamp.service.id_category = 3\n'
				break
			case '2':
				query += 'stamp.service.id_category = 1\n'
				break
			case '3':
				query += 'stamp.service.id_category = 2\n'
				break
			case '4':
				query += 'stamp.service.id_category = 4\n'
				break
			default:
				// TODO: ERROR MESSAGE
				break
		}
		// Insert filter institution name to query
		if (params.name)
			query += 'AND stamp.institution.name LIKE \"%'+params.name+'%\"\n'
		// Insert filter service name to query
		if (params.service_name)
			query += 'AND stamp.service.name LIKE \"%'+params.service_name+'%\"\n'
		// Insert filter name to query
		if (params.date0) {
			var date0 = params.date0.split("-")
			var date0_0 = new Date(parseInt(date0[0]), parseInt(date0[1])-1, parseInt(date0[2])-3) // Month starts from 0
			date0_0 = date0_0.toISOString().slice(0,10)
			var date0_1 = new Date(parseInt(date0[0]), parseInt(date0[1])-1, parseInt(date0[2])+3) // One week interval 6 days
			date0_1 = date0_1.toISOString().slice(0,10)
			query += 'AND stamp.service.timestamp >= \"'+date0_0+'\" AND stamp.service.timestamp < \"'+date0_1+'\"\n'
		}
		/*
		// Insert filter name to query
		// TODO: Find aprobation date table
		if (params.date1) {
			var date1 = parseInt(params.date0.split("-"))
			var date1_0 = new Date(date1[0], date1[1]-1, date1[2]-3) // Month starts from 0
			date1_0.toISOString().substring(0, 10);
			var date1_1 = new Date(date1[0], date1[1]-1, date1[2]+3) // One week interval 6 days
			date1_1.toISOString().substring(0, 10);
			query += 'AND stamp.service.timestamp >= '+date1_0.getTime+' AND stamp.service.timestamp < '+date1_1.getTime+'\n'
		}
		*/
		/*
			// TODO: Only certified services must be displayed
			query += 'AND stamp.service.current_status = 6;'
		*/
		query += ';'
		return model_institution.customQuery(query)
	}

	var get_service_retro = function (user, params) {
		var query = `
SELECT stamp.user_answer.requisite AS requisite, stamp.user_answer.justification AS justification,
stamp.user_answer.evidence AS evidence, stamp.user_answer.support_legal AS support_legal, stamp.user_answer.help AS help,
stamp.media.url AS url, stamp.mmedia.comment AS comment
FROM stamp.user_answer JOIN stamp.media ON stamp.user_answer.id_media = stamp.media.id
WHERE stamp.user_answer.`
	}

	var get_evaluator_asigned = function (user, body) {
		var query = `
			SELECT 
			i.name AS institution_name,
			s.name AS service_name,
			c.name AS category,
			ss.level AS level,
			s.url AS url,
			s.timestamp AS postulation_date,
			er.id AS id_evaluation_request,
			er.id_service AS id_service,
			er.id_question AS id_question,
			er.branch AS branch,
			ua.id AS id_user_answer,
			ua.id_topic AS id_topic
			FROM stamp.evaluation_request AS er
			JOIN stamp.user_answer AS ua ON (ua.id_question = er.id_question AND ua.id_service = er.id_service)
			JOIN stamp.service AS s ON s.id = er.id_service
			JOIN stamp.institution AS i ON i.id = s.id_institution
			JOIN stamp.category AS c ON c.id = s.id_category
			JOIN stamp.service_status AS ss ON ss.id_service = s.id
			WHERE er.id_user = ${user.id}
			AND er.id_request_status = 2 # Solicitado;
		`
		return model_entity_service.customQuery(query)
	}

	var get_services_in_process = function (user, body) {
		var query = `
			SELECT 
			i.name AS institution_name,
			s.name AS service_name,
			c.name AS category,
			ss.level AS level,
			s.url AS url,
			s.timestamp AS postulation_date,
			er.id AS id_evaluation_request,
			er.id_service AS id_service,
			er.id_question AS id_question,
			er.branch AS branch,
			ua.id AS id_user_answer,
			ua.id_topic AS id_topic
			FROM stamp.evaluation_request AS er
			JOIN stamp.user_answer AS ua ON (ua.id_question = er.id_question AND ua.id_service = er.id_service)
			JOIN stamp.service AS s ON s.id = er.id_service
			JOIN stamp.institution AS i ON i.id = s.id_institution
			JOIN stamp.category AS c ON c.id = s.id_category
			JOIN stamp.service_status AS ss ON ss.id_service = s.id
			WHERE er.id_user = ${user.id}
			AND er.id_request_status = 3 # Aceptado
			AND er.result IS NULL;
		`
		return model_entity_service.customQuery(query) 
	}

	var get_evaluating_requisite = function (user, body) {
		var query = `
SELECT
stamp.user_answer.requisite AS requisite,
stamp.user_answer.support_legal AS support_legal,
stamp.user_answer.help AS help,
stamp.user_answer.justifiaction AS justifications, # TODO: Correct this column name
stamp.user_answer.evidence AS evidence,
stamp.media.url AS url
# WARNING: COMMENT MISSING IN TABLE USER_ANSWER
FROM stamp.user_answer
JOIN stamp.media ON stamp.media.id = stamp.user_answer.id_media
WHERE stamp.user_answer.id_question = ${body.id_question}
;`
		return model_entity_service.customQuery(query) 
	}

	var get_evaluated_services = function (user, body) {
		var query = `
		SELECT 
		i.name AS institution_name,
		s.name AS service_name,
		c.name AS category,
		ss.level AS level,
		s.url AS url,
		er.result AS result,
		s.timestamp AS postulation_date,
		er.id AS id_evaluation_request,
		er.id_service AS id_service,
		er.id_question AS id_question,
		er.branch AS branch,
		ua.id AS id_user_answer,
		ua.id_topic AS id_topic
		FROM stamp.evaluation_request AS er
		JOIN stamp.user_answer AS ua ON (ua.id_question = er.id_question AND ua.id_service = er.id_service)
		JOIN stamp.service AS s ON s.id = er.id_service
		JOIN stamp.institution AS i ON i.id = s.id_institution
		JOIN stamp.category AS c ON c.id = s.id_category
		JOIN stamp.service_status AS ss ON ss.id_service = s.id
		WHERE er.id_user = ${user.id}
		AND er.result IS NOT NULL;
;`
		return model_entity_service.customQuery(query) 
	}
	
	var get_services_questions_and_status = function(token, params){
		return model_questions.getFiltered(params)
	}

	var list_service_evaluators = function(user, body) {
		// Traer evaluadores 
		var query = `
			SELECT 
			CONCAT(u.name, ' ', u.lastname) AS name,
			er.branch AS branch,
			er.id AS id_evaluation_request,
			er.id_user AS id_evaluator,
			er.id_request_status AS id_request_status,
			u.email AS evaluator_email,
			er.timestamp AS timestamp,
			er.alert_time AS alert_time,
			er.end_time AS end_time
			FROM stamp.evaluation_request AS er
			JOIN stamp.user AS u ON u.id = er.id_user
			WHERE er.id_service = ${body.id_service}
			AND er.id_question = ${body.id_question}
			ORDER BY er.branch ASC, er.id ASC
		`
		return model_request_status.customQuery(query).then((evaluators) => {
			var branches = []
			var branch1 = []
			var branch2 = []
			var branch3 = []
			for(var i in evaluators) {
				curr_date = new Date()
				end_date = new Date(evaluators[i].end_time)
				evaluators[i].missing_days = Math.round((end_date-curr_date)/(1000*60*60*24))
				if (evaluators[i].branch == 1)
					branch1.push(evaluators[i])
				else if (evaluators[i].branch == 2)
					branch2.push(evaluators[i])
				else
					branch3.push(evaluators[i])
			}
			branches.push({branch1: branch1, length: branch1.length})
			branches.push({branch2: branch2, length: branch2.length})
			branches.push({branch3: branch3, length: branch3.length})
			return branches
		})
	}
	
	getMap.set('evaluation_request', { method: get_entity_evaluation_request, permits: Permissions.NONE })
	getMap.set('user_answer', { method: get_entity_user_answer, permits: Permissions.NONE })
	getMap.set('request_status', { method: get_request_status, permits: Permissions.NONE })
	getMap.set('get_requirements_from_category_level', { method: get_requirements_from_category_level_create_service, permits: Permissions.ENTITY_SERVICE })
	getMap.set('get_filtered_list_requirements', { method: get_filtered_list_requirements, permits: Permissions.EVALUATE })
	getMap.set('get_evaluator_asigned', { method: get_evaluator_asigned, permits: Permissions.EVALUATE })
	getMap.set('get_services_in_process', { method: get_services_in_process, permits: Permissions.EVALUATE })
	getMap.set('get_evaluating_requisite', { method: get_evaluating_requisite, permits: Permissions.EVALUATE })
	getMap.set('get_evaluated_services', { method: get_evaluated_services, permits: Permissions.EVALUATE })
	getMap.set('services_questions_status', { method: get_services_questions_and_status, permits: Permissions.NONE }) // Revisar permisos 
	getMap.set('evaluation_request', { method: get_entity_evaluation_request, permits: Permissions.NONE })
	getMap.set('user_answer', { method: get_entity_user_answer, permits: Permissions.NONE })
	getMap.set('request_status', { method: get_request_status, permits: Permissions.NONE })
	getMap.set('list_empty_user_answers', { method: list_empty_user_answers, permits: Permissions.ENTITY_SERVICE })
	getMap.set('list_service_evaluators', { method: list_service_evaluators, permits: Permissions.ADMIN })

	/**
	 * @api {post} api/question/evaluation_request Create evaluation_request information
	 * @apiName Postevaluation_request
	 * @apiGroup question
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {Number} id_user 
	 * @apiParam {Number} id_question 
	 * @apiParam {Number} id_service 
	 * @apiParam {Number} id_request_status 
	 * @apiParam {Date} timestamp 
	 * @apiParam {Boolean} result 
	 * @apiParam {Number} branch 
	 * @apiParam {String} justify_reject 
	 * @apiParam {Date} alert_time 
	 * @apiParam {Date} end_time 
	 * @apiParam {Object} user 
	 * @apiParam {Object} service 
	 * @apiParam {Object} status 
 	 * 
	 */
	var create_entity_evaluation_request = function (user, body) {
		return model_entity_evaluation_request.create(body)
	}
	/**
	 * @api {post} api/question/user_answer Create user_answer information
	 * @apiName Postuser_answer
	 * @apiGroup question
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {Number} id_user 
	 * @apiParam {Number} id_service 
	 * @apiParam {Number} id_question 
	 * @apiParam {Number} id_topic 
	 * @apiParam {Number} id_status 
	 * @apiParam {Number} id_media 
	 * @apiParam {String} comment 
	 * @apiParam {Date} datetime 
	 * @apiParam {Date} timestamp 
	 * @apiParam {String} requisite 
	 * @apiParam {String} support_legal 
	 * @apiParam {String} justification 
	 * @apiParam {String} evidence 
	 * @apiParam {String} help 
	 * @apiParam {Boolean} alert 
	 * @apiParam {Object} question 
	 * @apiParam {Object} user 
	 * @apiParam {Object} media 
	 * @apiParam {Object} topic 
 	 * 
	 */
	var create_entity_user_answer = function (user, body) {
		return model_entity_user_answer.create(body)
	}
	/**
	 * @api {post} api/question/request_status Create request_status information
	 * @apiName Postrequest_status
	 * @apiGroup question
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var create_request_status = function (user, body) {
		return model_request_status.create(body)
	}
	
		var add_service_evaluator = function (user, body) {
			// Obtener requisitos del servicio que el evaluador puede calificar
			var query = `
				SELECT
				ua.id AS id_user_answer,
				er.id AS id_evaluation_request
				FROM stamp.user_answer AS ua
				JOIN stamp.user_questiontopic AS uqt ON uqt.id_topic = ua.id_topic
				JOIN stamp.evaluation_request AS er ON (er.id_question = ua.id_question AND er.id_service = ua.id_service)
				WHERE ua.id_service = ${body.id_service}
				AND uqt.id_user = ${user.id}
				AND er.id_request_status = 1
				ORDER BY ua.id, er.id;
			`
			return model_request_status.customQuery(query).then((requests) => {
				// Seleccionar el primer requisito de cada resultado
				var actual = requests[0].id_user_answer
				var result = []
				result.push(requests[0])
				for(var i in requests) {
					if(requests[i].id_user_answer != actual) {
						result.push(requests[i])
						actual = requests[i].id_user_answer
					}
				}
				// Actualizar el id_request_status y el usuario de estos evaluation_requests
				query = ""
				for(var i in result) {
					query += `
						UPDATE stamp.evaluation_request AS er
						SET
						er.id_request_status = "2", # Solicitado
						er.id_user = ${user.id} # Evaluador asignado
						WHERE er.id = ${result[i].id_evaluation_request};
					`
				}
				return model_request_status.customQuery(query).then(() => {
					return {message: "Requisitos agregados al evaluador exitosamente"}
				})
			})
	/*
			var query = `
	SELECT stamp.user_questiontopic.id_user AS id_user,
	stamp.user_answer.id AS id_user_answer,
	stamp.user_answer.id_service AS id_service
	FROM stamp.user_questiontopic
	JOIN stamp.user_answer ON stamp.user_answer.id_topic = stamp.user_questiontopic.id_topic
	WHERE stamp.user_answer.id_service = ${body.id_service}
	AND stamp.user_questiontopic.id_user = ${user.id}
	;`
			return model_request_status.customQuery(query).then((requests) => {
				for(var i in requests) {
					requests[i].id_request_status = 4 // 4 es el id_request_status para un servicio Solicitado
				}
				return model_evaluation_request.createMultiple2(requests)
			})*/
		}
	
		/*
		 * Crear question
		 */
		var create_question = function(user, body){
			if(body.id_topic){
				body.id_topic = parseInt(body.id_topic)
			}else{
				return { message: "se requiere id_topic" }
			}
			if(body.level){
				body.level = parseInt(body.level)
			}else{
				return { message: "se requiere level" }
			}
			if(body.text == undefined){
				return { message: "se requiere text" }
			}
			if(body.criteria == undefined){
				return { message: "se requiere criteria" }
			}
			if(body.evidence == undefined){
				return { message: "se requiere evidence" }
			}
			if(body.legal_support == undefined){
				return { message: "se requiere legal_support" }
			}
			if(body.help == undefined){
				return { message: "se requiere help" }
			}
			return model_questions.create(body).then(() => {
				return { message: "Question creado" }
			})
		}
	
	postMap.set('evaluation_request', { method: create_entity_evaluation_request, permits: Permissions.EVALUATE })
	postMap.set('user_answer', { method: create_entity_user_answer, permits: Permissions.EVALUATE })
	postMap.set('evaluation_request', { method: create_entity_evaluation_request, permits: Permissions.ADMIN })
	postMap.set('user_answer', { method: create_entity_user_answer, permits: Permissions.ADMIN })
	postMap.set('request_status', { method: create_request_status, permits: Permissions.ADMIN })
	postMap.set('add_service_evaluator', { method: add_service_evaluator, permits: Permissions.EVALUATE })
	postMap.set('question', { method: create_question, permits: Permissions.ADMIN })
	
	/**
	 * @api {put} api/question/evaluation_request Update evaluation_request information
	 * @apiName Putevaluation_request
	 * @apiGroup question
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {Number} id_user 
	 * @apiParam {Number} id_question 
	 * @apiParam {Number} id_service 
	 * @apiParam {Number} id_request_status 
	 * @apiParam {Date} timestamp 
	 * @apiParam {Boolean} result 
	 * @apiParam {Number} branch 
	 * @apiParam {String} justify_reject 
	 * @apiParam {Date} alert_time 
	 * @apiParam {Date} end_time 
	 * @apiParam {Object} user 
	 * @apiParam {Object} service 
	 * @apiParam {Object} status 
 	 * 
	 */
	var update_entity_evaluation_request = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_entity_evaluation_request.update(body,{id:body.id})
	}
	/**
	 * @api {put} api/question/user_answer Update user_answer information
	 * @apiName Putuser_answer
	 * @apiGroup question
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {Number} id_user 
	 * @apiParam {Number} id_service 
	 * @apiParam {Number} id_question 
	 * @apiParam {Number} id_topic 
	 * @apiParam {Number} id_status 
	 * @apiParam {Number} id_media 
	 * @apiParam {String} comment 
	 * @apiParam {Date} datetime 
	 * @apiParam {Date} timestamp 
	 * @apiParam {String} requisite 
	 * @apiParam {String} support_legal 
	 * @apiParam {String} justification 
	 * @apiParam {String} evidence 
	 * @apiParam {String} help 
	 * @apiParam {Boolean} alert 
	 * @apiParam {Object} question 
	 * @apiParam {Object} user 
	 * @apiParam {Object} media 
	 * @apiParam {Object} topic 
 	 * 
	 */
	var update_entity_user_answer = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_entity_user_answer.update(body,{id:body.id})
	}
	/**
	 * @api {put} api/question/request_status Update request_status information
	 * @apiName Putrequest_status
	 * @apiGroup question
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var update_request_status = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_request_status.update(body,{id:body.id})
	}

	var check_service_upgrade = function(user, body, level) {
		// Traer requisitos de un servicio con status <= level
		query = `
			SELECT COUNT(ua.id)
			FROM stamp.user_answer AS ua
			WHERE ua.id_service = ${body.id_service}
			AND (ua.id_status < ${level} OR ua.id_status = 10);
		`
		return model_request_status.customQuery(query).then((empty_reqs) => {
			// Cambiar status del servicio
			if(empty_reqs[0].total == 0) {
				query = `
					UPDATE stamp.service AS s
					SET s.current_status = ${level}
					WHERE s.id = ${body.id_service};

					UPDATE stamp.service_status AS ss
					SET ss.id_status = ${level}
					WHERE ss.id_service = ${body.id_service};
				`
				return model_request_status.customQuery(query)
			}
		})
	}

	var check_service_downgrade = function (user, body, level) {
		// Traer requisitos de un servicio con status <= level
			query = `
			SELECT COUNT(ua.id) AS total
			FROM stamp.user_answer AS ua
			WHERE ua.id_service = ${body.id_service}
			AND (ua.id_status < ${level} OR ua.id_status = 10);
		`
		return model_request_status.customQuery(query).then((empty_reqs) => {
			// Cambiar status del servicio
			if(empty_reqs[0].total > 0) {
				query = `
					UPDATE stamp.service AS s
					SET s.current_status = ${level}
					WHERE s.id = ${body.id_service};

					UPDATE stamp.service_status AS ss
					SET ss.id_status = ${level}
					WHERE ss.id_service = ${body.id_service};
				`
				return model_request_status.customQuery(query)
			}
		})
	}

	var edit_evaluation_request_status = function (user, body) {
		if(!body.decission)
			return {message: "Error: no se recibió flag decission"}
		switch(body.decission) {
			case "1": // Aceptar evaluar el requisito
				var query = `
					UPDATE stamp.evaluation_request AS er
					SET er.id_request_status = 3 # Aceptado
					WHERE er.id = ${body.id_evaluation_request};
				`
				return model_request_status.customQuery(query).then(() => {
					//** Cambiar el status del requisito de ser necesario **//
					// Traer los branches del requisito que no han sido aceptados
					query = `
						SELECT COUNT(er.id) AS total
						FROM stamp.evaluation_request AS er
						WHERE er.id_service = ${body.id_service}
						AND er.id_question = ${body.id_question}
						AND er.id_request_status < 3;
					`
					return model_request_status.customQuery(query).then((empty_brnchs) => {
						// Cambiar status del requisito
						if(empty_brnchs[0].total == 0) {
							query = `
								UPDATE stamp.user_answer AS ua
								SET ua.id_status = 5 # Evaluación
								WHERE ua.id_service = ${body.id_service}
								AND ua.id_question = ${body.id_question};
							`
							return model_request_status.customQuery(query).then(() => {
								return check_service_upgrade(user, body, 5).then(() => {
									return {message: "Requisito en proceso de evaluación"}
								})
							})
						}
						return {message: "Requisito en proceso de evaluación"}
					})
				})
			default: // Rechazar evaluar el requisito
				var query = `
					UPDATE stamp.evaluation_request AS er
					SET er.id_request_status = 4 # Rechazado
					WHERE er.id = ${body.id_evaluation_request};
				`
				return model_request_status.customQuery(query).then(() => {
					// Crear nueva casilla del branch del requisito
					query = `
						INSERT INTO stamp.evaluation_request
						(id_question, id_service, id_request_status, branch)
						SELECT er.id_question, er.id_service, '1' AS id_request_status, er.branch
						FROM stamp.evaluation_request AS er
						WHERE er.id = ${body.id_evaluation_request}
					`
					return model_request_status.customQuery(query).then(() => {
						// Contar número de rechazos en este branch
						query = `
							SELECT COUNT(er.id) AS total
							FROM stamp.evaluation_request AS er
							WHERE er.id_service = ${body.id_service}
							AND er.id_question = ${body.id_question}
							AND er.branch = ${body.branch}
							AND er.id_request_status = 4; # Rechazadas
						`
						return model_request_status.customQuery(query).then((rejected_rqsts) => {
							// Verificar si se debe generar alerta por rechazos del requisito
							if(rejected_rqsts[0][0].total >= 3) { 
								query = `
									UPDATE stamp.user_answer AS ua
									SET ua.alert = 1
									WHERE ua.id_service = ${body.id_service}
									AND ua.id_question = ${body.id_question};
								`
								return model_request_status.customQuery(query).then(() => {
									// Obtener fechas de alerta y de finalización de la etapa Asignación
									query = `
										SELECT st.pre_end AS pre_end, st.duration AS duration
										FROM stamp.status AS st
										WHERE st.id = 2 # Asignación
										AND st.alert = 1
									`
									return model_request_status.customQuery(query).then((dates) => {
										var dumy_date
										end_date = new Date()
										end_date.setDate(end_date.getDate() + dates[0].duration) // Agregar la duración de la etapa
										alert_date = new Date()
										alert_date.setDate(end_date.getDate() - dates[0].pre_end) // Restar el tiempo previo para alertar
										end_date = end_date.toISOString()
										dumy_date = end_date.split('T')
										end_date = dumy_date[0]
										alert_date = alert_date.toISOString()
										dumy_date = alert_date.split('T')
										alert_date = dumy_date[0]
										query = `
											UPDATE stamp.evaluation_request AS er SET 
											er.alert_time = DATE '${alert_date}',
											er.end_time = DATE '${end_date}'
											WHERE er.id_service = ${body.id_service}
											AND er.id_question = ${body.id_question}
											AND er.branch = ${body.branch}
											AND er.alert_time IS NULL
											AND er.end_time IS NULL;
										`
										return model_request_status.customQuery(query).then(() => {
											return {message: "Requisito fue rechazado exitosamente"}
										})
									})
								})
							} else {
								// Obtener fechas de alerta y de finalización de la etapa Aceptación
								query = `
									SELECT st.pre_end AS pre_end, st.duration AS duration
									FROM stamp.status AS st
									WHERE st.id = 3 # Aceptación
									AND st.alert = 1
								`
								return model_request_status.customQuery(query).then((dates) => {
									var dumy_date
									end_date = new Date()
									end_date.setDate(end_date.getDate() + dates[0].duration) // Agregar la duración de la etapa
									alert_date = new Date()
									alert_date.setDate(end_date.getDate() - dates[0].pre_end) // Restar el tiempo previo para alertar
									end_date = end_date.toISOString()
									dumy_date = end_date.split('T')
									end_date = dumy_date[0]
									alert_date = alert_date.toISOString()
									dumy_date = alert_date.split('T')
									alert_date = dumy_date[0]
									query = `
										UPDATE stamp.evaluation_request AS er SET 
										er.alert_time = DATE '${alert_date}',
										er.end_time = DATE '${end_date}'
										WHERE er.id_service = ${body.id_service}
										AND er.id_question = ${body.id_question}
										AND er.branch = ${body.branch}
										AND er.alert_time IS NULL
										AND er.end_time IS NULL;
									`
									return model_request_status.customQuery(query).then(() => {
										return {message: "Requisito fue rechazado exitosamente"}
									})
								})
							}
						})
					})
				})
		}
	}

	var set_final_decission_requisite = function (user, body) {
		// Guardar veredicto del evaluador
		var query = `
			UPDATE stamp.evaluation_request AS er
			SET er.result = ${body.result}
			WHERE er.id = ${body.id_evaluation_request};
		`
		return model_request_status.customQuery(query).then(() => {
			// Verificar status del requisito
			query = `
				SELECT COUNT(er.id) AS total
				FROM stamp.evaluation_request AS er
				WHERE er.id_question = ${body.id_question}
				AND er.id_service = ${body.id_service}
				AND er.result IS NOT NULL;
			`
			return model_request_status.customQuery(query).then((evaluated) => {
				// Generar veredicto total sobre el requisito
				if(evaluated[0].total >= 3) {
					query = `
						SELECT AVG(er.result) AS average
						FROM stamp.evaluation_request AS er
						WHERE er.id_question = ${body.id_question}
						AND er.id_service = ${body.id_service}
						AND er.result IS NOT NULL;
					`
					return model_request_status.customQuery(query).then((average) => {
						// Aprobar requisito
						if(average[0].average >= 0.6) {
							query = `
								UPDATE stamp.user_answer AS ua
								SET ua.id_status = 8 # Aprobado
								WHERE ua.id_service = ${body.id_service}
								AND ua.id_question = ${body.id_question};
							`
							return model_request_status.customQuery(query).then(() => {
								return check_service_upgrade(user, body, 8).then(() => {
									return {message: "Servicio calificado exitosamente"}
								})
							})
						} else {
							query = `
								UPDATE stamp.user_answer AS ua
								SET ua.id_status = 9 # Rechazado
								WHERE ua.id_service = ${body.id_service}
								AND ua.id_question = ${body.id_question};
							`
							return model_request_status.customQuery(query).then(() => {
								return check_service_upgrade(user, body, 9).then(() => {
									return {message: "Servicio calificado exitosamente"}
								})
							})
						}
					})
				}
				return {message: "Servicio calificado exitosamente"}
			})
		})
	}

	var verify_requisite = function (user, body) {
		switch(body.decission) {
			case "1": // Aceptado
				var query = `
					UPDATE stamp.user_answer AS ua
					SET ua.id_status = 3 # Aceptación
					WHERE er.id_service = ${body.id_service}
					AND er.id_question = ${body.id_question};
				`
				return model_request_status.customQuery(query).then(() => {
					return check_service_upgrade(user, body, 3).then(() => {
						// Crear 3 branches en evaluation_request
						query = `
							SET FOREIGN_KEY_CHECKS=0;
							INSERT INTO stamp.evaluation_request AS er
							(id_question, id_service, id_request_status, branch) VALUES
							("${body.id_question}", "${body.id_service}", "1", "1"),
							("${body.id_question}", "${body.id_service}", "1", "2"),
							("${body.id_question}", "${body.id_service}", "1", "3");	
							SET FOREIGN_KEY_CHECKS=1;
						`
						return model_request_status.customQuery(query).then(() => {
							// Obtener fechas de alerta y de finalización de la etapa Aceptación
							query = `
								SELECT st.pre_end AS pre_end, st.duration AS duration
								FROM stamp.status AS st
								WHERE st.id = 3 # Aceptación
								AND st.alert = 1
							`
							return model_request_status.customQuery(query).then((dates) => {
								var dumy_date
								end_date = new Date()
								end_date.setDate(end_date.getDate() + dates[0].duration) // Agregar la duración de la etapa
								alert_date = new Date()
								alert_date.setDate(end_date.getDate() - dates[0].pre_end) // Restar el tiempo previo para alertar
								end_date = end_date.toISOString()
								dumy_date = end_date.split('T')
								end_date = dumy_date[0]
								alert_date = alert_date.toISOString()
								dumy_date = alert_date.split('T')
								alert_date = dumy_date[0]
								query = `
									UPDATE stamp.evaluation_request AS er SET 
									er.alert_time = DATE '${alert_date}',
									er.end_time = DATE '${end_date}'
									WHERE er.id_service = ${body.id_service}
									AND er.id_question = ${body.id_question};
								`
								return model_request_status.customQuery(query).then(() => {
									return {message: "Requisito fue rechazado exitosamente"}
								})
							})
						})
					})
				})
				break
			default: // Rechazado
				break
			
		}
	}

	putMap.set('evaluation_request', { method: update_entity_evaluation_request, permits: Permissions.ADMIN })
	putMap.set('user_answer', { method: update_entity_user_answer, permits: Permissions.ADMIN })
	putMap.set('request_status', { method: update_request_status, permits: Permissions.ADMIN })
	putMap.set('edit_evaluation_request_status', { method: edit_evaluation_request_status, permits: Permissions.EVALUATE })
	putMap.set('set_final_decission_requisite', { method: set_final_decission_requisite, permits: Permissions.EVALUATE })
	putMap.set('verify_requisite', { method: verify_requisite, permits: Permissions.ADMIN })

	/**
	 * @api {delete} api/question/evaluation_request Delete evaluation_request information
	 * @apiName Deleteevaluation_request
	 * @apiGroup question
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {Number} id_user 
	 * @apiParam {Number} id_question 
	 * @apiParam {Number} id_service 
	 * @apiParam {Number} id_request_status 
	 * @apiParam {Date} timestamp 
	 * @apiParam {Boolean} result 
	 * @apiParam {Number} branch 
	 * @apiParam {String} justify_reject 
	 * @apiParam {Date} alert_time 
	 * @apiParam {Date} end_time 
	 * @apiParam {Object} user 
	 * @apiParam {Object} service 
	 * @apiParam {Object} status 
 	 * 
	 */
	var delete_entity_evaluation_request = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_entity_evaluation_request.delete(body,{id:body.id})
	}
	/**
	 * @api {delete} api/question/user_answer Delete user_answer information
	 * @apiName Deleteuser_answer
	 * @apiGroup question
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {Number} id_user 
	 * @apiParam {Number} id_service 
	 * @apiParam {Number} id_question 
	 * @apiParam {Number} id_topic 
	 * @apiParam {Number} id_status 
	 * @apiParam {Number} id_media 
	 * @apiParam {String} comment 
	 * @apiParam {Date} datetime 
	 * @apiParam {Date} timestamp 
	 * @apiParam {String} requisite 
	 * @apiParam {String} support_legal 
	 * @apiParam {String} justification 
	 * @apiParam {String} evidence 
	 * @apiParam {String} help 
	 * @apiParam {Boolean} alert 
	 * @apiParam {Object} question 
	 * @apiParam {Object} user 
	 * @apiParam {Object} media 
	 * @apiParam {Object} topic 
 	 * 
	 */
	var delete_entity_user_answer = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_entity_user_answer.delete(body,{id:body.id})
	}
	/**
	 * @api {delete} api/question/request_status Delete request_status information
	 * @apiName Deleterequest_status
	 * @apiGroup question
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var delete_request_status = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_request_status.delete(body,{id:body.id})
	}
	deleteMap.set('evaluation_request', { method: delete_entity_evaluation_request, permits: Permissions.ADMIN })
	deleteMap.set('user_answer', { method: delete_entity_user_answer, permits: Permissions.ADMIN })
	deleteMap.set('request_status', { method: delete_request_status, permits: Permissions.ADMIN })
	var params = [getMap, postMap, putMap, deleteMap]
	BaseController.apply(this, params)
	//---------------------------------------------------------------
	return this;
}
util.inherits(question_controller, BaseController)
module.exports = question_controller