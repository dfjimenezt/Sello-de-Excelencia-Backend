/**  * CONTROLLER AUTO_GENERATED BY DMT-GENERATOR
 * configuration
 * DMT 2017
 * GENERATED: 5 / 9 / 2017 - 7:39:27
 **/
var BaseController = require('../utils/controller.js')
var util = require('util');
var utiles = require('../utils/utiles.js')
var Errors = require('../utils/errors.js')
var Permissions = require('../utils/permissions.js')
var Auth_ctrl = require('./auth.js')
var entity_user = require('../models/entity_user.js')
var role = require('../models/role.js')
var availability = require('../models/availability.js')
var user_category = require('../models/user_category.js')
var user_questiontopic = require('../models/user_questiontopic.js')
var permission = require('../models/permission.js')
var entity_permission_role = require('../models/entity_permission_role.js')
var entity_user_role = require('../models/entity_user_role.js')
var institution_user = require('../models/institution_user.js')
var config = require('../models/config.js')
var type_document = require('../models/type_document.js')
var points = require('../models/points.js')
var motives = require('../models/motives.js')
var hall_of_fame = require('../models/hall_of_fame.js')
var configuration_controller = function () {
	var model_entity_user = new entity_user()
	var model_role = new role()
	var model_availability = new availability()
	var model_user_category = new user_category()
	var model_user_questiontopic = new user_questiontopic()
	var model_permission = new permission()
	var model_entity_permission_role = new entity_permission_role()
	var model_entity_user_role = new entity_user_role()
	var model_institution_user = new institution_user()
	var model_config = new config()
	var model_type_document = new type_document()
	var model_points = new points()
	var model_motives = new motives()
	var model_hall_of_fame = new hall_of_fame()
	//---------------------------------------------------------------
	var getMap = new Map(), postMap = new Map(), putMap = new Map(), deleteMap = new Map()
	var _get = function(model,user,params){
		let key = model.getPrimaryKey()
		if (params.filter_field) {
			if (typeof params.filter_field == 'string') {
				params.filter_field = [params.filter_field]
				params.filter_value = [params.filter_value]
			}
		} else {
			params.filter_field = []
			params.filter_value = []
		}
		if (params[key]) {
			params.filter_field.push(key)
			params.filter_value.push(params[key])
		}
		return model.getAll({
			filter: params.filter,
			limit: params.limit,
			page: params.page,
			order: params.order,
			filter_fields: params.filter_field,
			filter_values: params.filter_value,
			fields: params.field,
			lang: params.lang
		})
	}
	/**
	 * @api {get} api/configuration/user Request user information
	 * @apiName Getuser
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id user unique ID.
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"id": 53,
	 *		"picture": "This is an example text",
	 *		"name": "This is an example text",
	 *		"secondname": "This is an example text",
	 *		"lastname": "This is an example text",
	 *		"secondlastname": "This is an example text",
	 *		"email": "This is an example text",
	 *		"phone": "This is an example text",
	 *		"extension": "This is an example text",
	 *		"mobile": "This is an example text",
	 *		"organization": "This is an example text",
	 *		"ocupation": "This is an example text",
	 *		"education_level": "This is an example text",
	 *		"tmp_pwd": 1,
	 *		"points": 97,
	 *		"active": 1,
	 *		"verified": 1,
	 *		"alert": 0,
	 *		"terms": 1,
	 *		"newsletter": 1,
	 *		"timestamp": "1969-05-20",
	 *		"id_availability": 97,
	 *		"id_city": 62,
	 *		"id_region": 19,
	 *		"id_country": 93,
	 *		"document": "This is an example text",
	 *		"id_type_document": 75
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_entity_user = function (user, params) {
		return _get(model_entity_user,user,params)
	}
	/**
	 * @api {get} api/configuration/role Request role information
	 * @apiName Getrole
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id role unique ID.
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"id": 14,
	 *		"name": "This is an example text"
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_role = function (user, params) {
		return _get(model_role,user,params)
	}
	/**
	 * @api {get} api/configuration/availability Request availability information
	 * @apiName Getavailability
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id availability unique ID.
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"id": 18,
	 *		"name": "This is an example text"
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_availability = function (user, params) {
		return _get(model_availability,user,params)
	}
	/**
	 * @api {get} api/configuration/user_category Request user_category information
	 * @apiName Getuser_category
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"id_user": 27,
	 *		"id_category": 1
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_user_category = function (user, params) {
		return _get(model_user_category,user,params)
	}
	/**
	 * @api {get} api/configuration/user_questiontopic Request user_questiontopic information
	 * @apiName Getuser_questiontopic
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"id_user": 75,
	 *		"id_topic": 96
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_user_questiontopic = function (user, params) {
		return _get(model_user_questiontopic,user,params)
	}
	/**
	 * @api {get} api/configuration/permission Request permission information
	 * @apiName Getpermission
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id permission unique ID.
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"id": 86,
	 *		"name": "This is an example text"
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_permission = function (user, params) {
		return _get(model_permission,user,params)
	}
	/**
	 * @api {get} api/configuration/permission_role Request permission_role information
	 * @apiName Getpermission_role
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"id_role": 23,
	 *		"id_permission": 44
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_entity_permission_role = function (user, params) {
		return _get(model_entity_permission_role,user,params)
	}
	/**
	 * @api {get} api/configuration/user_role Request user_role information
	 * @apiName Getuser_role
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"id_user": 41,
	 *		"id_role": 37
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_entity_user_role = function (user, params) {
		return _get(model_entity_user_role,user,params)
	}
	/**
	 * @api {get} api/configuration/institution_user Request institution_user information
	 * @apiName Getinstitution_user
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"id_institution": 99,
	 *		"id_user": 20,
	 *		"role": "This is an example text",
	 *		"admin": 1,
	 *		"certificate": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sit amet tortor quis turpis cursus tristique."
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_institution_user = function (user, params) {
		return _get(model_institution_user,user,params)
	}
	/**
	 * @api {get} api/configuration/config Request config information
	 * @apiName Getconfig
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id config unique ID.
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"id": 88,
	 *		"header": "This is an example text",
	 *		"address": "This is an example text",
	 *		"postal_code": "This is an example text",
	 *		"phone": "This is an example text",
	 *		"free_phone": "This is an example text",
	 *		"anticorruption_phone": "This is an example text",
	 *		"email_PQRS": "This is an example text",
	 *		"schedulle": "This is an example text"
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_config = function (user, params) {
		return _get(model_config,user,params)
	}
	/**
	 * @api {get} api/configuration/type_document Request type_document information
	 * @apiName Gettype_document
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id type_document unique ID.
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"id": 30,
	 *		"name": "This is an example text"
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_type_document = function (user, params) {
		return _get(model_type_document,user,params)
	}
	/**
	 * @api {get} api/configuration/points Request points information
	 * @apiName Getpoints
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id points unique ID.
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"id": 22,
	 *		"prev_points": 86,
	 *		"value": 49,
	 *		"result": 20,
	 *		"justification": "This is an example text",
	 *		"id_user": 75,
	 *		"id_motives": 80
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_points = function (user, params) {
		if(params.sumarized){
			return model_points.getSumarized(user.id)
		}
		return _get(model_points,user,params)
	}
	/**
	 * @api {get} api/configuration/motives Request motives information
	 * @apiName Getmotives
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id motives unique ID.
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"id": 80,
	 *		"name": "This is an example text",
	 *		"points": 70
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_motives = function (user, params) {
		return _get(model_motives,user,params)
	}
	/**
	 * @api {get} api/configuration/hall_of_fame Request hall_of_fame information
	 * @apiName Gethall_of_fame
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id hall_of_fame unique ID.
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"id": 87,
	 *		"name": "This is an example text",
	 *		"ranking": 54,
	 *		"points": 54,
	 *		"date": "1969-05-20",
	 *		"id_user": 38,
	 *		"id_role": 99
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_hall_of_fame = function (user, params) {
		if (typeof params.filter_field == 'string') {
			params.filter_field = [params.filter_field]
			params.filter_value = [params.filter_value]
		}
		let today = new Date()
		today.setHours(0,0,0)
		let tomorrow = new Date(today.getFullYear(),today.getMonth(),today.getDate()+1)
		params.filter_field.push('date')
		params.filter_value.push('> '+today.toISOString().split('T')[0])
		params.filter_field.push('date')
		params.filter_value.push('< '+tomorrow.toISOString().split('T')[0])
		params.order='points desc'
		return _get(model_hall_of_fame,user,params)
	}
	getMap.set('user', { method: get_entity_user, permits: Permissions.ADMIN_USERS })
	getMap.set('role', { method: get_role, permits: Permissions.NONE })
	getMap.set('availability', { method: get_availability, permits: Permissions.ADMIN_USERS })
	getMap.set('user_category', { method: get_user_category, permits: Permissions.ADMIN_USERS })
	getMap.set('user_questiontopic', { method: get_user_questiontopic, permits: Permissions.ADMIN_USERS })
	getMap.set('permission', { method: get_permission, permits: Permissions.ADMIN_USERS })
	getMap.set('permission_role', { method: get_entity_permission_role, permits: Permissions.ADMIN_USERS })
	getMap.set('user_role', { method: get_entity_user_role, permits: Permissions.ADMIN_USERS })
	getMap.set('institution_user', { method: get_institution_user, permits: Permissions.NONE })
	getMap.set('config', { method: get_config, permits: Permissions.NONE })
	getMap.set('type_document', { method: get_type_document, permits: Permissions.NONE })
	getMap.set('points', { method: get_points, permits: Permissions.NONE })
	getMap.set('motives', { method: get_motives, permits: Permissions.NONE })
	getMap.set('hall_of_fame', { method: get_hall_of_fame, permits: Permissions.NONE })
	/**
	 * @api {post} api/configuration/user Create user information
	 * @apiName Postuser
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} picture 
	 * @apiParam {String} name 
	 * @apiParam {String} secondname 
	 * @apiParam {String} lastname 
	 * @apiParam {String} secondlastname 
	 * @apiParam {String} email 
	 * @apiParam {String} phone 
	 * @apiParam {String} extension 
	 * @apiParam {String} mobile 
	 * @apiParam {String} organization 
	 * @apiParam {String} ocupation 
	 * @apiParam {String} education_level 
	 * @apiParam {Boolean} tmp_pwd 
	 * @apiParam {Number} points 
	 * @apiParam {Boolean} active 
	 * @apiParam {Boolean} verified 
	 * @apiParam {Boolean} alert 
	 * @apiParam {Boolean} terms 
	 * @apiParam {Boolean} newsletter 
	 * @apiParam {Date} timestamp 
	 * @apiParam {Number} id_availability 
	 * @apiParam {Number} id_city 
	 * @apiParam {Number} id_region 
	 * @apiParam {Number} id_country 
	 * @apiParam {String} document 
	 * @apiParam {Number} id_type_document 
 	 * 
	 */
	var create_entity_user = function (user, body) {
		return model_entity_user.create(body)
	}
	/**
	 * @api {post} api/configuration/role Create role information
	 * @apiName Postrole
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var create_role = function (user, body) {
		return model_role.create(body)
	}
	/**
	 * @api {post} api/configuration/availability Create availability information
	 * @apiName Postavailability
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var create_availability = function (user, body) {
		return model_availability.create(body)
	}
	/**
	 * @api {post} api/configuration/user_category Create user_category information
	 * @apiName Postuser_category
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id_user 
	 * @apiParam {Number} id_category 
 	 * 
	 */
	var create_user_category = function (user, body) {
		return model_user_category.create(body)
	}
	/**
	 * @api {post} api/configuration/user_questiontopic Create user_questiontopic information
	 * @apiName Postuser_questiontopic
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id_user 
	 * @apiParam {Number} id_topic 
 	 * 
	 */
	var create_user_questiontopic = function (user, body) {
		return model_user_questiontopic.create(body)
	}
	/**
	 * @api {post} api/configuration/permission Create permission information
	 * @apiName Postpermission
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var create_permission = function (user, body) {
		return model_permission.create(body)
	}
	/**
	 * @api {post} api/configuration/permission_role Create permission_role information
	 * @apiName Postpermission_role
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id_role 
	 * @apiParam {Number} id_permission 
 	 * 
	 */
	var create_entity_permission_role = function (user, body) {
		return model_entity_permission_role.create(body)
	}
	/**
	 * @api {post} api/configuration/user_role Create user_role information
	 * @apiName Postuser_role
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id_user 
	 * @apiParam {Number} id_role 
 	 * 
	 */
	var create_entity_user_role = function (user, body) {
		return model_entity_user_role.create(body)
	}
	/**
	 * @api {post} api/configuration/institution_user Create institution_user information
	 * @apiName Postinstitution_user
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id_institution 
	 * @apiParam {Number} id_user 
	 * @apiParam {String} role 
	 * @apiParam {Boolean} admin 
	 * @apiParam {Text} certificate 
 	 * 
	 */
	var create_institution_user = function (user, body) {
		return model_institution_user.create(body)
	}
	/**
	 * @api {post} api/configuration/config Create config information
	 * @apiName Postconfig
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} header 
	 * @apiParam {String} address 
	 * @apiParam {String} postal_code 
	 * @apiParam {String} phone 
	 * @apiParam {String} free_phone 
	 * @apiParam {String} anticorruption_phone 
	 * @apiParam {String} email_PQRS 
	 * @apiParam {String} schedulle 
 	 * 
	 */
	var create_config = function (user, body) {
		return model_config.create(body)
	}
	/**
	 * @api {post} api/configuration/type_document Create type_document information
	 * @apiName Posttype_document
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var create_type_document = function (user, body) {
		return model_type_document.create(body)
	}
	/**
	 * @api {post} api/configuration/points Create points information
	 * @apiName Postpoints
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {Number} prev_points 
	 * @apiParam {Number} value 
	 * @apiParam {Number} result 
	 * @apiParam {String} justification 
	 * @apiParam {Number} id_user 
	 * @apiParam {Number} id_motives 
 	 * 
	 */
	var create_points = function (user, body) {
		return model_points.create(body)
	}
	/**
	 * @api {post} api/configuration/motives Create motives information
	 * @apiName Postmotives
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
	 * @apiParam {Number} points 
 	 * 
	 */
	var create_motives = function (user, body) {
		return model_motives.create(body)
	}
	/**
	 * @api {post} api/configuration/hall_of_fame Create hall_of_fame information
	 * @apiName Posthall_of_fame
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
	 * @apiParam {Number} ranking 
	 * @apiParam {Number} points 
	 * @apiParam {Date} date 
	 * @apiParam {Number} id_user 
	 * @apiParam {Number} id_role 
 	 * 
	 */
	var create_hall_of_fame = function (user, body) {
		return model_hall_of_fame.create(body)
	}
	postMap.set('user', { method: create_entity_user, permits: Permissions.ADMIN_USERS })
	postMap.set('role', { method: create_role, permits: Permissions.ADMIN_USERS })
	postMap.set('availability', { method: create_availability, permits: Permissions.ADMIN_USERS })
	postMap.set('user_category', { method: create_user_category, permits: Permissions.ADMIN_USERS })
	postMap.set('user_questiontopic', { method: create_user_questiontopic, permits: Permissions.ADMIN_USERS })
	postMap.set('permission', { method: create_permission, permits: Permissions.ADMIN_USERS })
	postMap.set('permission_role', { method: create_entity_permission_role, permits: Permissions.ADMIN_USERS })
	postMap.set('user_role', { method: create_entity_user_role, permits: Permissions.ADMIN_USERS })
	postMap.set('institution_user', { method: create_institution_user, permits: Permissions.ADMIN_USERS })
	postMap.set('config', { method: create_config, permits: Permissions.ADMIN_CONFIG })
	postMap.set('type_document', { method: create_type_document, permits: Permissions.ADMIN_TYPE_DOCUMENT })
	postMap.set('points', { method: create_points, permits: Permissions.ADMIN_POINTS })
	postMap.set('motives', { method: create_motives, permits: Permissions.ADMIN_MOTIVES })
	postMap.set('hall_of_fame', { method: create_hall_of_fame, permits: Permissions.ADMIN_HALL })
	/**
	 * @api {put} api/configuration/user Update user information
	 * @apiName Putuser
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} picture 
	 * @apiParam {String} name 
	 * @apiParam {String} secondname 
	 * @apiParam {String} lastname 
	 * @apiParam {String} secondlastname 
	 * @apiParam {String} email 
	 * @apiParam {String} phone 
	 * @apiParam {String} extension 
	 * @apiParam {String} mobile 
	 * @apiParam {String} organization 
	 * @apiParam {String} ocupation 
	 * @apiParam {String} education_level 
	 * @apiParam {Boolean} tmp_pwd 
	 * @apiParam {Number} points 
	 * @apiParam {Boolean} active 
	 * @apiParam {Boolean} verified 
	 * @apiParam {Boolean} alert 
	 * @apiParam {Boolean} terms 
	 * @apiParam {Boolean} newsletter 
	 * @apiParam {Date} timestamp 
	 * @apiParam {Number} id_availability 
	 * @apiParam {Number} id_city 
	 * @apiParam {Number} id_region 
	 * @apiParam {Number} id_country 
	 * @apiParam {String} document 
	 * @apiParam {Number} id_type_document 
 	 * 
	 */
	var update_entity_user = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_entity_user.update(body,{id:body.id})
	}
	/**
	 * @api {put} api/configuration/role Update role information
	 * @apiName Putrole
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var update_role = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_role.update(body,{id:body.id})
	}
	/**
	 * @api {put} api/configuration/availability Update availability information
	 * @apiName Putavailability
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var update_availability = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_availability.update(body,{id:body.id})
	}
	/**
	 * @api {put} api/configuration/user_category Update user_category information
	 * @apiName Putuser_category
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id_user 
	 * @apiParam {Number} id_category 
 	 * 
	 */
	var update_user_category = function (user, body) {
		if (!body.id_user) {
			throw utiles.informError(400)
		}
		return model_user_category.update(body,{id_user:body.id_user})
	}
	/**
	 * @api {put} api/configuration/user_questiontopic Update user_questiontopic information
	 * @apiName Putuser_questiontopic
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id_user 
	 * @apiParam {Number} id_topic 
 	 * 
	 */
	var update_user_questiontopic = function (user, body) {
		if (!body.id_user) {
			throw utiles.informError(400)
		}
		return model_user_questiontopic.update(body,{id_user:body.id_user})
	}
	/**
	 * @api {put} api/configuration/permission Update permission information
	 * @apiName Putpermission
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var update_permission = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_permission.update(body,{id:body.id})
	}
	/**
	 * @api {put} api/configuration/permission_role Update permission_role information
	 * @apiName Putpermission_role
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id_role 
	 * @apiParam {Number} id_permission 
 	 * 
	 */
	var update_entity_permission_role = function (user, body) {
		if (!body.id_role) {
			throw utiles.informError(400)
		}
		return model_entity_permission_role.update(body,{id_role:body.id_role})
	}
	/**
	 * @api {put} api/configuration/user_role Update user_role information
	 * @apiName Putuser_role
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id_user 
	 * @apiParam {Number} id_role 
 	 * 
	 */
	var update_entity_user_role = function (user, body) {
		if (!body.id_user) {
			throw utiles.informError(400)
		}
		return model_entity_user_role.update(body,{id_user:body.id_user})
	}
	/**
	 * @api {put} api/configuration/institution_user Update institution_user information
	 * @apiName Putinstitution_user
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id_institution 
	 * @apiParam {Number} id_user 
	 * @apiParam {String} role 
	 * @apiParam {Boolean} admin 
	 * @apiParam {Text} certificate 
 	 * 
	 */
	var update_institution_user = function (user, body) {
		if (!body.id_institution) {
			throw utiles.informError(400)
		}
		return model_institution_user.update(body,{id_institution:body.id_institution})
	}
	/**
	 * @api {put} api/configuration/config Update config information
	 * @apiName Putconfig
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} header 
	 * @apiParam {String} address 
	 * @apiParam {String} postal_code 
	 * @apiParam {String} phone 
	 * @apiParam {String} free_phone 
	 * @apiParam {String} anticorruption_phone 
	 * @apiParam {String} email_PQRS 
	 * @apiParam {String} schedulle 
 	 * 
	 */
	var update_config = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_config.update(body,{id:body.id})
	}
	/**
	 * @api {put} api/configuration/type_document Update type_document information
	 * @apiName Puttype_document
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var update_type_document = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_type_document.update(body,{id:body.id})
	}
	/**
	 * @api {put} api/configuration/points Update points information
	 * @apiName Putpoints
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {Number} prev_points 
	 * @apiParam {Number} value 
	 * @apiParam {Number} result 
	 * @apiParam {String} justification 
	 * @apiParam {Number} id_user 
	 * @apiParam {Number} id_motives 
 	 * 
	 */
	var update_points = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_points.update(body,{id:body.id})
	}
	/**
	 * @api {put} api/configuration/motives Update motives information
	 * @apiName Putmotives
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
	 * @apiParam {Number} points 
 	 * 
	 */
	var update_motives = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_motives.update(body,{id:body.id})
	}
	/**
	 * @api {put} api/configuration/hall_of_fame Update hall_of_fame information
	 * @apiName Puthall_of_fame
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
	 * @apiParam {Number} ranking 
	 * @apiParam {Number} points 
	 * @apiParam {Date} date 
	 * @apiParam {Number} id_user 
	 * @apiParam {Number} id_role 
 	 * 
	 */
	var update_hall_of_fame = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_hall_of_fame.update(body,{id:body.id})
	}
	putMap.set('user', { method: update_entity_user, permits: Permissions.ADMIN_USERS })
	putMap.set('role', { method: update_role, permits: Permissions.ADMIN_USERS })
	putMap.set('availability', { method: update_availability, permits: Permissions.ADMIN_USERS })
	putMap.set('user_category', { method: update_user_category, permits: Permissions.ADMIN_USERS })
	putMap.set('user_questiontopic', { method: update_user_questiontopic, permits: Permissions.ADMIN_USERS })
	putMap.set('permission', { method: update_permission, permits: Permissions.ADMIN_USERS })
	putMap.set('permission_role', { method: update_entity_permission_role, permits: Permissions.ADMIN_USERS })
	putMap.set('user_role', { method: update_entity_user_role, permits: Permissions.ADMIN_USERS })
	putMap.set('institution_user', { method: update_institution_user, permits: Permissions.ADMIN_USERS })
	putMap.set('config', { method: update_config, permits: Permissions.ADMIN_CONFIG })
	putMap.set('type_document', { method: update_type_document, permits: Permissions.ADMIN_TYPE_DOCUMENT })
	putMap.set('points', { method: update_points, permits: Permissions.ADMIN_POINTS })
	putMap.set('motives', { method: update_motives, permits: Permissions.ADMIN_MOTIVES })
	putMap.set('hall_of_fame', { method: update_hall_of_fame, permits: Permissions.ADMIN_HALL })
	/**
	 * @api {delete} api/configuration/user Delete user information
	 * @apiName Deleteuser
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} picture 
	 * @apiParam {String} name 
	 * @apiParam {String} secondname 
	 * @apiParam {String} lastname 
	 * @apiParam {String} secondlastname 
	 * @apiParam {String} email 
	 * @apiParam {String} phone 
	 * @apiParam {String} extension 
	 * @apiParam {String} mobile 
	 * @apiParam {String} organization 
	 * @apiParam {String} ocupation 
	 * @apiParam {String} education_level 
	 * @apiParam {Boolean} tmp_pwd 
	 * @apiParam {Number} points 
	 * @apiParam {Boolean} active 
	 * @apiParam {Boolean} verified 
	 * @apiParam {Boolean} alert 
	 * @apiParam {Boolean} terms 
	 * @apiParam {Boolean} newsletter 
	 * @apiParam {Date} timestamp 
	 * @apiParam {Number} id_availability 
	 * @apiParam {Number} id_city 
	 * @apiParam {Number} id_region 
	 * @apiParam {Number} id_country 
	 * @apiParam {String} document 
	 * @apiParam {Number} id_type_document 
 	 * 
	 */
	var delete_entity_user = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_entity_user.delete(body,{id:body.id})
	}
	/**
	 * @api {delete} api/configuration/role Delete role information
	 * @apiName Deleterole
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var delete_role = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_role.delete(body,{id:body.id})
	}
	/**
	 * @api {delete} api/configuration/availability Delete availability information
	 * @apiName Deleteavailability
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var delete_availability = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_availability.delete(body,{id:body.id})
	}
	/**
	 * @api {delete} api/configuration/user_category Delete user_category information
	 * @apiName Deleteuser_category
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id_user 
	 * @apiParam {Number} id_category 
 	 * 
	 */
	var delete_user_category = function (user, body) {
		if (!body.id_user) {
			throw utiles.informError(400)
		}
		return model_user_category.delete(body,{id_user:body.id_user})
	}
	/**
	 * @api {delete} api/configuration/user_questiontopic Delete user_questiontopic information
	 * @apiName Deleteuser_questiontopic
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id_user 
	 * @apiParam {Number} id_topic 
 	 * 
	 */
	var delete_user_questiontopic = function (user, body) {
		if (!body.id_user) {
			throw utiles.informError(400)
		}
		return model_user_questiontopic.delete(body,{id_user:body.id_user})
	}
	/**
	 * @api {delete} api/configuration/permission Delete permission information
	 * @apiName Deletepermission
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var delete_permission = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_permission.delete(body,{id:body.id})
	}
	/**
	 * @api {delete} api/configuration/permission_role Delete permission_role information
	 * @apiName Deletepermission_role
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id_role 
	 * @apiParam {Number} id_permission 
 	 * 
	 */
	var delete_entity_permission_role = function (user, body) {
		if (!body.id_role) {
			throw utiles.informError(400)
		}
		return model_entity_permission_role.delete(body,{id_role:body.id_role})
	}
	/**
	 * @api {delete} api/configuration/user_role Delete user_role information
	 * @apiName Deleteuser_role
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id_user 
	 * @apiParam {Number} id_role 
 	 * 
	 */
	var delete_entity_user_role = function (user, body) {
		if (!body.id_user) {
			throw utiles.informError(400)
		}
		return model_entity_user_role.delete(body,{id_user:body.id_user})
	}
	/**
	 * @api {delete} api/configuration/institution_user Delete institution_user information
	 * @apiName Deleteinstitution_user
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id_institution 
	 * @apiParam {Number} id_user 
	 * @apiParam {String} role 
	 * @apiParam {Boolean} admin 
	 * @apiParam {Text} certificate 
 	 * 
	 */
	var delete_institution_user = function (user, body) {
		if (!body.id_institution) {
			throw utiles.informError(400)
		}
		return model_institution_user.delete(body,{id_institution:body.id_institution})
	}
	/**
	 * @api {delete} api/configuration/config Delete config information
	 * @apiName Deleteconfig
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} header 
	 * @apiParam {String} address 
	 * @apiParam {String} postal_code 
	 * @apiParam {String} phone 
	 * @apiParam {String} free_phone 
	 * @apiParam {String} anticorruption_phone 
	 * @apiParam {String} email_PQRS 
	 * @apiParam {String} schedulle 
 	 * 
	 */
	var delete_config = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_config.delete(body,{id:body.id})
	}
	/**
	 * @api {delete} api/configuration/type_document Delete type_document information
	 * @apiName Deletetype_document
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var delete_type_document = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_type_document.delete(body,{id:body.id})
	}
	/**
	 * @api {delete} api/configuration/points Delete points information
	 * @apiName Deletepoints
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {Number} prev_points 
	 * @apiParam {Number} value 
	 * @apiParam {Number} result 
	 * @apiParam {String} justification 
	 * @apiParam {Number} id_user 
	 * @apiParam {Number} id_motives 
 	 * 
	 */
	var delete_points = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_points.delete(body,{id:body.id})
	}
	/**
	 * @api {delete} api/configuration/motives Delete motives information
	 * @apiName Deletemotives
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
	 * @apiParam {Number} points 
 	 * 
	 */
	var delete_motives = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_motives.delete(body,{id:body.id})
	}
	/**
	 * @api {delete} api/configuration/hall_of_fame Delete hall_of_fame information
	 * @apiName Deletehall_of_fame
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
	 * @apiParam {Number} ranking 
	 * @apiParam {Number} points 
	 * @apiParam {Date} date 
	 * @apiParam {Number} id_user 
	 * @apiParam {Number} id_role 
 	 * 
	 */
	var delete_hall_of_fame = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_hall_of_fame.delete(body,{id:body.id})
	}
	deleteMap.set('user', { method: delete_entity_user, permits: Permissions.ADMIN_USERS })
	deleteMap.set('role', { method: delete_role, permits: Permissions.ADMIN_USERS })
	deleteMap.set('availability', { method: delete_availability, permits: Permissions.ADMIN_USERS })
	deleteMap.set('user_category', { method: delete_user_category, permits: Permissions.ADMIN_USERS })
	deleteMap.set('user_questiontopic', { method: delete_user_questiontopic, permits: Permissions.ADMIN_USERS })
	deleteMap.set('permission', { method: delete_permission, permits: Permissions.ADMIN_USERS })
	deleteMap.set('permission_role', { method: delete_entity_permission_role, permits: Permissions.ADMIN_USERS })
	deleteMap.set('user_role', { method: delete_entity_user_role, permits: Permissions.ADMIN_USERS })
	deleteMap.set('institution_user', { method: delete_institution_user, permits: Permissions.ADMIN_USERS })
	deleteMap.set('config', { method: delete_config, permits: Permissions.ADMIN_CONFIG })
	deleteMap.set('type_document', { method: delete_type_document, permits: Permissions.ADMIN_TYPE_DOCUMENT })
	deleteMap.set('points', { method: delete_points, permits: Permissions.ADMIN_POINTS })
	deleteMap.set('motives', { method: delete_motives, permits: Permissions.ADMIN_MOTIVES })
	deleteMap.set('hall_of_fame', { method: delete_hall_of_fame, permits: Permissions.ADMIN_HALL })
	var params = [getMap, postMap, putMap, deleteMap]
	BaseController.apply(this, params)
	//---------------------------------------------------------------
	return this;
}
util.inherits(configuration_controller, BaseController)
module.exports = configuration_controller