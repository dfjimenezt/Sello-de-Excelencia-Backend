/**  * CONTROLLER AUTO_GENERATED BY DMT-GENERATOR
 * configuration
 * DMT 2017
 * GENERATED: 17 / 8 / 2017 - 22:25:52
 **/
var BaseController = require('../utils/controller.js')
var util = require('util');
var utiles = require('../utils/utiles.js')
var Errors = require('../utils/errors.js')
var Permissions = require('../utils/permissions.js')
var Auth_ctrl = require('./auth.js')
var entity_user = require('../models/entity_user.js')
var role = require('../models/role.js')
var availability = require('../models/availability.js')
var level = require('../models/level.js')
var user_category = require('../models/user_category.js')
var user_questiontopic = require('../models/user_questiontopic.js')
var permission = require('../models/permission.js')
var entity_permission_role = require('../models/entity_permission_role.js')
var entity_user_role = require('../models/entity_user_role.js')
var config = require('../models/config.js')
var type_document = require('../models/type_document.js')
var User = require('../models/user.js')
var Questiontopic = require('../models/questiontopic.js')

var configuration_controller = function () {
	var userModel = new User()
	var model_entity_user = new entity_user()
	var model_role = new role()
	var model_availability = new availability()
	var model_level = new level()
	var model_user_category = new user_category()
	var model_user_questiontopic = new user_questiontopic()
	var model_permission = new permission()
	var model_entity_permission_role = new entity_permission_role()
	var model_entity_user_role = new entity_user_role()
	var model_config = new config()
	var model_type_document = new type_document()
	var model_questiontopic = new Questiontopic()
	//---------------------------------------------------------------
	var getMap = new Map(), postMap = new Map(), putMap = new Map(), deleteMap = new Map()
	var _get = function(model,user,params){
		let key = model.getPrimaryKey()
		if (params.filter_field) {
			if (typeof params.filter_field == 'string') {
				params.filter_field = [params.filter_field]
				params.filter_value = [params.filter_value]
			}
		} else {
			params.filter_field = []
			params.filter_value = []
		}
		if (params[key]) {
			params.filter_field.push(key)
			params.filter_value.push(params[key])
		}
		return model.getAll({
			filter: params.filter,
			limit: params.limit,
			page: params.page,
			order: params.order,
			filter_fields: params.filter_field,
			filter_values: params.filter_value,
			fields: params.field,
			lang: params.lang
		})
	}
	/**
	 * @api {get} api/configuration/user Request user information
	 * @apiName Getuser
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id user unique ID.
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"id": 37,
	 *		"picture": "This is an example text",
	 *		"name": "This is an example text",
	 *		"secondname": "This is an example text",
	 *		"lastname": "This is an example text",
	 *		"secondlastname": "This is an example text",
	 *		"email": "This is an example text",
	 *		"phone": "This is an example text",
	 *		"extension": "This is an example text",
	 *		"mobile": "This is an example text",
	 *		"organization": "This is an example text",
	 *		"ocupation": "This is an example text",
	 *		"education_level": "This is an example text",
	 *		"tmp_pwd": 1,
	 *		"points": 16,
	 *		"active": 0,
	 *		"verified": 1,
	 *		"terms": 0,
	 *		"newsletter": 1,
	 *		"timestamp": "1969-05-20",
	 *		"id_region": 100,
	 *		"id_country": 27,
	 *		"document": "This is an example text",
	 *		"roles": [
	 *			{
	 *				"id": 74,
	 *				"name": "This is an example text"
	 *			}
	 *		],
	 *		"categories": [
	 *			{
	 *				"id": 35,
	 *				"name": "This is an example text"
	 *			}
	 *		],
	 *		"topics": [
	 *			{
	 *				"id": 57,
	 *				"name": "This is an example text",
	 *				"id_usertype": 96,
	 *				"id_category": 30
	 *			}
	 *		],
	 *		"availability": {
	 *			"id": 65,
	 *			"name": "This is an example text"
	 *		},
	 *		"city": {
	 *			"id": 19,
	 *			"name": "This is an example text",
	 *			"code": "This is an example text",
	 *			"latitude": 61,
	 *			"longitude": 35,
	 *			"region": {
	 *				"id": 42,
	 *				"name": "This is an example text",
	 *				"id_capital": 45,
	 *				"id_country": 36,
	 *				"code": "This is an example text"
	 *			}
	 *		},
	 *		"type_document": {
	 *			"id": 33,
	 *			"name": "This is an example text"
	 *		}
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_entity_user = function (user, params) {
		return _get(model_entity_user,user,params)
	}
	/**
	 * @api {get} api/configuration/role Request role information
	 * @apiName Getrole
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id role unique ID.
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"id": 83,
	 *		"name": "This is an example text"
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_role = function (user, params) {
		return _get(model_role,user,params)
	}
	/**
	 * @api {get} api/configuration/availability Request availability information
	 * @apiName Getavailability
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id availability unique ID.
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"id": 99,
	 *		"name": "This is an example text"
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_availability = function (user, params) {
		return _get(model_availability,user,params)
	}
	/**
	 * @api {get} api/configuration/user_category Request user_category information
	 * @api {get} api/configuration/level Request level information
	 * @apiName Getlevel
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id level unique ID.
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"id": 28,
	 *		"name": "This is an example text"
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_level = function (user, params) {
		return _get(model_level,user,params)
	}
	/**
	 * @apiName Getuser_category
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"id_user": 36,
	 *		"id_category": 23
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_user_category = function (user, params) {
		return _get(model_user_category,user,params)
	}
	/**
	 * @api {get} api/configuration/user_questiontopic Request user_questiontopic information
	 * @apiName Getuser_questiontopic
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"id_user": 21,
	 *		"id_topic": 78
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_user_questiontopic = function (user, params) {
		return _get(model_user_questiontopic,user,params)
	}
	/**
	 * @api {get} api/configuration/permission Request permission information
	 * @apiName Getpermission
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id permission unique ID.
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"id": 42,
	 *		"name": "This is an example text"
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_permission = function (user, params) {
		return _get(model_permission,user,params)
	}
	/**
	 * @api {get} api/configuration/permission_role Request permission_role information
	 * @apiName Getpermission_role
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"permission": {
	 *			"id": 42,
	 *			"name": "This is an example text"
	 *		},
	 *		"role": {
	 *			"id": 66,
	 *			"name": "This is an example text"
	 *		}
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_entity_permission_role = function (user, params) {
		return _get(model_entity_permission_role,user,params)
	}
	/**
	 * @api {get} api/configuration/user_role Request user_role information
	 * @apiName Getuser_role
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"user": {
	 *			"id": 87,
	 *			"picture": "This is an example text",
	 *			"name": "This is an example text",
	 *			"secondname": "This is an example text",
	 *			"lastname": "This is an example text",
	 *			"secondlastname": "This is an example text",
	 *			"email": "This is an example text",
	 *			"phone": "This is an example text",
	 *			"extension": "This is an example text",
	 *			"mobile": "This is an example text",
	 *			"organization": "This is an example text",
	 *			"ocupation": "This is an example text",
	 *			"education_level": "This is an example text",
	 *			"tmp_pwd": 1,
	 *			"points": 4,
	 *			"active": 0,
	 *			"verified": 1,
	 *			"terms": 0,
	 *			"newsletter": 1,
	 *			"timestamp": "1969-05-20",
	 *			"id_region": 45,
	 *			"id_country": 80,
	 *			"document": "This is an example text",
	 *			"availability": {
	 *				"id": 90,
	 *				"name": "This is an example text"
	 *			},
	 *			"city": {
	 *				"id": 38,
	 *				"name": "This is an example text",
	 *				"code": "This is an example text",
	 *				"latitude": 38,
	 *				"longitude": 60,
	 *				"region": {
	 *					"id": 92,
	 *					"name": "This is an example text",
	 *					"id_capital": 46,
	 *					"id_country": 56,
	 *					"code": "This is an example text"
	 *				}
	 *			},
	 *			"type_document": {
	 *				"id": 47,
	 *				"name": "This is an example text"
	 *			}
	 *		},
	 *		"role": {
	 *			"id": 4,
	 *			"name": "This is an example text"
	 *		}
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_entity_user_role = function (user, params) {
		return _get(model_entity_user_role,user,params)
	}
	/**
	 * @api {get} api/configuration/config Request config information
	 * @apiName Getconfig
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id config unique ID.
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"id": 55,
	 *		"header": "This is an example text",
	 *		"address": "This is an example text",
	 *		"postal_code": "This is an example text",
	 *		"phone": "This is an example text",
	 *		"free_phone": "This is an example text",
	 *		"anticorruption_phone": "This is an example text",
	 *		"email_PQRS": "This is an example text",
	 *		"schedulle": "This is an example text"
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_config = function (user, params) {
		return _get(model_config,user,params)
	}
	/**
	 * @api {get} api/configuration/type_document Request type_document information
	 * @apiName Gettype_document
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id type_document unique ID.
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"id": 30,
	 *		"name": "This is an example text"
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_type_document = function (user, params) {
		return _get(model_type_document,user,params)
	}
	/**
	 * @api {get} api/configuration/evaluator Request user information
	 * @apiName Getuser
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	*/
	var get_entity_user_evaluator = function (user,params){
		return _get(model_entity_user_role,user,{filter_field: "id_role", filter_value: "2"})
	}
	/**
	 * @api {get} api/configuration/evaluator_hall Request user information
	 * @apiName Getuser
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	*/
	var get_entity_user_evaluator_hall = function (user,params){
        return _get(model_entity_user_role,user,{filter_field: ["id_role", "user_flag_hall"], filter_value: ["2", "1"]})
	}
	// Traer temáticas según categorías (como parámetro) y nivel de evaluador (también como parámetro)
	// Esta función se usa cuando el evaluador a entrado por primera vez (login) y debe anexar en sus
	// datos la categoría a evaluar.
	var get_evaluation_thematic = function (token, params) {
		let tabla_categoria = "stamp."
		switch(params.id_category){
			case "1":
				tabla_categoria += "gobierno_en_linea_datos_abiertos"
				break
			case "2":
				tabla_categoria += "gobierno_en_linea_requisitos_participacion"
				break
			case "3":
				tabla_categoria += "servicios_en_linea"
				break
			case "4":
				tabla_categoria += "gestion_de_ti"
				break
		}
		params.id_category = parseInt(params.id_category)
		var query = `SELECT DISTINCT id, name 
		FROM ${tabla_categoria}
		RIGHT JOIN stamp.questiontopic ON ${tabla_categoria}.\`Area Tematica\` = stamp.questiontopic.name 
		WHERE stamp.questiontopic.id_category = ${params.id_category} AND (${tabla_categoria}.Perfil = `
		switch(params.id_level){
			case "1":
				query += `'Usuario')`
				break
			case "2":
				query += `'Experto' OR ${tabla_categoria}.Perfil = 'Usuario')`
				break
		}
		query += ' ORDER BY id ;';
		return model_level.customQuery(query)
	}

	// Traer temática según evaluador
	// Se trata de las temáticas seleccionadas por el evaluador almacenada en sus datos, junto con
	// las temáticas también seleccionables, esto con el fin de que cuando desee agregar más temáticas
	// sea mostrada esa información con su id.
	var get_questiontopics_evaluator = function (token) {
		let retorno = []
		let tabla_categoria = "stamp."
		var query1 = 'SELECT * FROM stamp.user_questiontopic WHERE id_user = ' + token.id + ';'
		return model_user_questiontopic.customQuery(query1).then((user_question) => {
			var ids_topics = []
			for (var i in user_question ) {
				ids_topics.push(user_question[i].id_topic)
			}
			return model_questiontopic.getByUids(ids_topics).then((quest_topic) => {
				retorno[0] = quest_topic
				switch(token.categories[0].id){
					case 1:	 
						tabla_categoria += "gobierno_en_linea_datos_abiertos"
						break
					case 2:
						tabla_categoria += "gobierno_en_linea_requisitos_participacion"
						break
					case 3:
						tabla_categoria += "servicios_en_linea"
						break
					case 4:
						tabla_categoria += "gestion_de_ti"
						break
				}	
				var query2 = `SELECT DISTINCT id, name 
				FROM ${tabla_categoria}
				RIGHT JOIN stamp.questiontopic ON ${tabla_categoria}.\`Area Tematica\` = stamp.questiontopic.name 
				WHERE ${tabla_categoria}.Perfil = `
				switch(token.id_level){
					case 1:
						query2 += `'Usuario';`
						break
					case 2:
						query2 += `'Experto' OR ${tabla_categoria}.Perfil = 'Usuario';`
						break
				}
				return model_level.customQuery(query2).then((questiontopic) => {
					retorno[1] = []
					for( var i in retorno[0]){
						for(var j in questiontopic){
							if(!(retorno[0][i].id === questiontopic[j].id)){
								retorno[1].push(questiontopic[j])
							}
						}
					}
					return retorno
				})
			})
	})
	}

	getMap.set('user', { method: get_entity_user, permits: Permissions.NONE })
	getMap.set('role', { method: get_role, permits: Permissions.NONE })
	getMap.set('availability', { method: get_availability, permits: Permissions.ADMIN })
	getMap.set('level', { method: get_level, permits: Permissions.ADMIN })
	getMap.set('user_category', { method: get_user_category, permits: Permissions.ADMIN })
	getMap.set('user_questiontopic', { method: get_user_questiontopic, permits: Permissions.ADMIN })
	getMap.set('permission', { method: get_permission, permits: Permissions.NONE })
	getMap.set('permission_role', { method: get_entity_permission_role, permits: Permissions.NONE })
	getMap.set('user_role', { method: get_entity_user_role, permits: Permissions.NONE })
	getMap.set('config', { method: get_config, permits: Permissions.NONE })
	getMap.set('type_document', { method: get_type_document, permits: Permissions.NONE })
	getMap.set('evaluator', { method: get_entity_user_evaluator, permits: Permissions.NONE })
	getMap.set('evaluator_hall', { method: get_entity_user_evaluator_hall, permits: Permissions.NONE })
	getMap.set('evaluation_thematic', { method: get_evaluation_thematic, permits: Permissions.PLATFORM })
	getMap.set('questiontopics_evaluator', { method: get_questiontopics_evaluator, permits: Permissions.PLATFORM })
	/**
	 * @api {post} api/configuration/user Create user information
	 * @apiName Postuser
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} picture 
	 * @apiParam {String} name 
	 * @apiParam {String} secondname 
	 * @apiParam {String} lastname 
	 * @apiParam {String} secondlastname 
	 * @apiParam {String} email 
	 * @apiParam {String} phone 
	 * @apiParam {String} extension 
	 * @apiParam {String} mobile 
	 * @apiParam {String} organization 
	 * @apiParam {String} ocupation 
	 * @apiParam {String} education_level 
	 * @apiParam {Boolean} tmp_pwd 
	 * @apiParam {Number} points 
	 * @apiParam {Boolean} active 
	 * @apiParam {Boolean} verified 
	 * @apiParam {Boolean} terms 
	 * @apiParam {Boolean} newsletter 
	 * @apiParam {Date} timestamp 
	 * @apiParam {Number} id_availability 
	 * @apiParam {Number} id_city 
	 * @apiParam {Number} id_region 
	 * @apiParam {Number} id_country 
	 * @apiParam {String} document 
	 * @apiParam {Number} id_type_document 
	 * @apiParam {Array} roles 
	 * @apiParam {Array} categories 
	 * @apiParam {Array} topics 
	 * @apiParam {Object} availability 
	 * @apiParam {Object} city 
	 * @apiParam {Object} type_document 
 	 * 
	 */
	var create_entity_user = function (user, body) {
		return model_entity_user.create(body)
	}
	/**
	 * @api {post} api/configuration/role Create role information
	 * @apiName Postrole
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var create_role = function (user, body) {
		return model_role.create(body)
	}
	/**
	 * @api {post} api/configuration/availability Create availability information
	 * @apiName Postavailability
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var create_availability = function (user, body) {
		return model_availability.create(body)
	}
	/**
	 * @api {post} api/configuration/level Create level information
	 * @apiName Postlevel
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var create_level = function (user, body) {
		return model_level.create(body)
	}
	/**
	 * @api {post} api/configuration/user_category Create user_category information
	 * @apiName Postuser_category
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id_user 
	 * @apiParam {Number} id_category 
 	 * 
	 */
	var create_user_category = function (user, body) {
		return model_user_category.create(body)
	}
	/**
	 * @api {post} api/configuration/user_questiontopic Create user_questiontopic information
	 * @apiName Postuser_questiontopic
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id_user 
	 * @apiParam {Number} id_topic 
 	 * 
	 */
	var create_user_questiontopic = function (user, body) {
		return model_user_questiontopic.create(body)
	}
	/**
	 * @api {post} api/configuration/permission Create permission information
	 * @apiName Postpermission
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var create_permission = function (user, body) {
		return model_permission.create(body)
	}
	/**
	 * @api {post} api/configuration/permission_role Create permission_role information
	 * @apiName Postpermission_role
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id_role 
	 * @apiParam {Number} id_permission 
	 * @apiParam {Object} permission 
	 * @apiParam {Object} role 
 	 * 
	 */
	var create_entity_permission_role = function (user, body) {
		return model_entity_permission_role.create(body)
	}
	/**
	 * @api {post} api/configuration/user_role Create user_role information
	 * @apiName Postuser_role
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id_user 
	 * @apiParam {Number} id_role 
	 * @apiParam {Object} user 
	 * @apiParam {Object} role 
 	 * 
	 */
	var create_entity_user_role = function (user, body) {
		return model_entity_user_role.create(body)
	}
	/**
	 * @api {post} api/configuration/config Create config information
	 * @apiName Postconfig
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} header 
	 * @apiParam {String} address 
	 * @apiParam {String} postal_code 
	 * @apiParam {String} phone 
	 * @apiParam {String} free_phone 
	 * @apiParam {String} anticorruption_phone 
	 * @apiParam {String} email_PQRS 
	 * @apiParam {String} schedulle 
 	 * 
	 */
	var create_config = function (user, body) {
		return model_config.create(body)
	}
	/**
	 * @api {post} api/configuration/type_document Create type_document information
	 * @apiName Posttype_document
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var create_type_document = function (user, body) {
		return model_type_document.create(body)
	}
	postMap.set('user', { method: create_entity_user, permits: Permissions.ADMIN })
	postMap.set('role', { method: create_role, permits: Permissions.ADMIN })
	postMap.set('availability', { method: create_availability, permits: Permissions.ADMIN })
	postMap.set('level', { method: create_level, permits: Permissions.ADMIN })
	postMap.set('user_category', { method: create_user_category, permits: Permissions.ADMIN })
	postMap.set('user_questiontopic', { method: create_user_questiontopic, permits: Permissions.ADMIN })
	postMap.set('permission', { method: create_permission, permits: Permissions.ADMIN })
	postMap.set('permission_role', { method: create_entity_permission_role, permits: Permissions.ADMIN })
	postMap.set('user_role', { method: create_entity_user_role, permits: Permissions.ADMIN })
	postMap.set('config', { method: create_config, permits: Permissions.ADMIN })
	postMap.set('type_document', { method: create_type_document, permits: Permissions.ADMIN })
	/**
	 * @api {put} api/configuration/user Update user information
	 * @apiName Putuser
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} picture 
	 * @apiParam {String} name 
	 * @apiParam {String} secondname 
	 * @apiParam {String} lastname 
	 * @apiParam {String} secondlastname 
	 * @apiParam {String} email 
	 * @apiParam {String} phone 
	 * @apiParam {String} extension 
	 * @apiParam {String} mobile 
	 * @apiParam {String} organization 
	 * @apiParam {String} ocupation 
	 * @apiParam {String} education_level 
	 * @apiParam {Boolean} tmp_pwd 
	 * @apiParam {Number} points 
	 * @apiParam {Boolean} active 
	 * @apiParam {Boolean} verified 
	 * @apiParam {Boolean} terms 
	 * @apiParam {Boolean} newsletter 
	 * @apiParam {Date} timestamp 
	 * @apiParam {Number} id_availability 
	 * @apiParam {Number} id_city 
	 * @apiParam {Number} id_region 
	 * @apiParam {Number} id_country 
	 * @apiParam {String} document 
	 * @apiParam {Number} id_type_document 
	 * @apiParam {Array} roles 
	 * @apiParam {Array} categories 
	 * @apiParam {Array} topics 
	 * @apiParam {Object} availability 
	 * @apiParam {Object} city 
	 * @apiParam {Object} type_document 
 	 * 
	 */
	var update_entity_user = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_entity_user.update(body,{id:body.id})
	}
	/**
	 * @api {put} api/configuration/role Update role information
	 * @apiName Putrole
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var update_role = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_role.update(body,{id:body.id})
	}
	/**
	 * @api {put} api/configuration/availability Update availability information
	 * @apiName Putavailability
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var update_availability = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_availability.update(body,{id:body.id})
	}
	/**
	 * @api {put} api/configuration/level Update level information
	 * @apiName Putlevel
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var update_level = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_level.update(body,{id:body.id})
	}
	/**
	 * @api {put} api/configuration/user_category Update user_category information
	 * @apiName Putuser_category
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id_user 
	 * @apiParam {Number} id_category 
 	 * 
	 */
	var update_user_category = function (user, body) {
		if (!body.id_user) {
			throw utiles.informError(400)
		}
		return model_user_category.update(body,{id_user:body.id_user})
	}
	/**
	 * @api {put} api/configuration/user_questiontopic Update user_questiontopic information
	 * @apiName Putuser_questiontopic
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id_user 
	 * @apiParam {Number} id_topic 
 	 * 
	 */
	var update_user_questiontopic = function (user, body) {
		if (!body.id_user) {
			throw utiles.informError(400)
		}
		return model_user_questiontopic.update(body,{id_user:body.id_user})
	}
	/**
	 * @api {put} api/configuration/permission Update permission information
	 * @apiName Putpermission
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var update_permission = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_permission.update(body,{id:body.id})
	}
	/**
	 * @api {put} api/configuration/permission_role Update permission_role information
	 * @apiName Putpermission_role
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id_role 
	 * @apiParam {Number} id_permission 
	 * @apiParam {Object} permission 
	 * @apiParam {Object} role 
 	 * 
	 */
	var update_entity_permission_role = function (user, body) {
		if (!body.id_role) {
			throw utiles.informError(400)
		}
		return model_entity_permission_role.update(body,{id_role:body.id_role})
	}
	/**
	 * @api {put} api/configuration/user_role Update user_role information
	 * @apiName Putuser_role
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id_user 
	 * @apiParam {Number} id_role 
	 * @apiParam {Object} user 
	 * @apiParam {Object} role 
 	 * 
	 */
	var update_entity_user_role = function (user, body) {
		if (!body.id_user) {
			throw utiles.informError(400)
		}
		return model_entity_user_role.update(body,{id_user:body.id_user})
	}
	/**
	 * @api {put} api/configuration/config Update config information
	 * @apiName Putconfig
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} header 
	 * @apiParam {String} address 
	 * @apiParam {String} postal_code 
	 * @apiParam {String} phone 
	 * @apiParam {String} free_phone 
	 * @apiParam {String} anticorruption_phone 
	 * @apiParam {String} email_PQRS 
	 * @apiParam {String} schedulle 
 	 * 
	 */
	var update_config = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_config.update(body,{id:body.id})
	}
	/**
	 * @api {put} api/configuration/type_document Update type_document information
	 * @apiName Puttype_document
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var update_type_document = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_type_document.update(body,{id:body.id})
	}
	/* Actualizar datos del evaluador (por primeara vez) de esta se genera update_evaluator
	 * body.id_category
	 * body.id_topic
	 */
	var update_evaluator_firstime = function (token, body){
		return update_evaluator(token, body)
	}

	/* Actualizar datos del evaluador (por primeara vez) de esta se genera update_evaluator
	 * body.id_category
	 * body.id_topic
	 */
	var update_evaluator = function (token, body){
		var update_data = [] 
		for ( var i in  body) {
			if (token[i] !== undefined){
				update_data[i] = body[i]
			}
		}
		return get_user_category(token, {id_user: token.id}).then((category_user) =>{
			token.categories = category_user.data
			return get_user_questiontopic(token, {id_user: token.id}).then((topics_user) =>{
				token.topics = topics_user.data
				for(var i in token.categories){
					for(var j in body.id_category){
						if(token.categories[i].id_category == body.id_category[j]){
							body.id_category.splice(body.id_category.indexOf(body.id_category[j]),1)
							break
						}
					}
				}
				for(var i in token.topics){
					for(var j in body.id_topic){
						if(token.topics[i].id_topic == body.id_topic[j]){
							body.id_topic.splice(body.id_topic.indexOf(body.id_topic[j]),1)
							break
						}
					}
				}
				if((body.id_topic[0] == undefined) && (body.id_category[0] == undefined)){
					return userModel.update(update_data, { id: token.id } ).then(() =>{
						return { message: "Update evaluator ok"}
					})
				}else if((body.id_category[0] == undefined) && (body.id_topic[0] != undefined)){
					var data_evaluator_questiontopic = {data:[], col_names:["id_user", "id_topic"]}
					for(var i in body.id_topic){
						data_evaluator_questiontopic.data.push([
							token.id, parseInt(body.id_topic[i])
						])
					}
					return model_user_questiontopic.createMultiple(data_evaluator_questiontopic).then(() => {
						return userModel.update(update_data, { id: token.id } ).then(() =>{
							return { message: "Update topics ok"}
						})
					})
				}else if((body.id_category[0] != undefined) && (body.id_topic[0] == undefined)){
					var data_evaluator_categories = {data:[], col_names:["id_user", "id_category"]}
					for(var i in body.id_category){
						data_evaluator_categories.data.push([
							token.id, parseInt(body.id_category[i])
						])
					}
					return model_user_category.createMultiple(data_evaluator_categories).then(() => {
						return userModel.update(update_data, { id: token.id } ).then(() =>{
							return { message: "Update categories ok"}
						})
					})
				}else if((body.id_category[0] != undefined) && (body.id_topic[0] != undefined)){
					var data_evaluator_categories = {data:[], col_names:["id_user", "id_category"]}
					for(var i in body.id_category){
						data_evaluator_categories.data.push([
							token.id, parseInt(body.id_category[i])
						])
					}
					var data_evaluator_questiontopic = {data:[], col_names:["id_user", "id_topic"]}
					for(var i in body.id_topic){
						data_evaluator_questiontopic.data.push([
							token.id, parseInt(body.id_topic[i])
						])
					}
					return model_user_category.createMultiple(data_evaluator_categories).then(() => {
						return model_user_questiontopic.createMultiple(data_evaluator_questiontopic).then(() => {
							return userModel.update(update_data, { id: token.id } ).then(() =>{
								return { message: "Update categories and topics ok"}
							})
						})
					})
				}
			})
		})
	}
	putMap.set('user', { method: update_entity_user, permits: Permissions.ADMIN })
	putMap.set('role', { method: update_role, permits: Permissions.ADMIN })
	putMap.set('availability', { method: update_availability, permits: Permissions.ADMIN })
	putMap.set('level', { method: update_level, permits: Permissions.ADMIN })
	putMap.set('user_category', { method: update_user_category, permits: Permissions.ADMIN })
	putMap.set('user_questiontopic', { method: update_user_questiontopic, permits: Permissions.ADMIN })
	putMap.set('permission', { method: update_permission, permits: Permissions.ADMIN })
	putMap.set('permission_role', { method: update_entity_permission_role, permits: Permissions.ADMIN })
	putMap.set('user_role', { method: update_entity_user_role, permits: Permissions.ADMIN })
	putMap.set('config', { method: update_config, permits: Permissions.ADMIN })
	putMap.set('type_document', { method: update_type_document, permits: Permissions.ADMIN })
	putMap.set('evaluator_firstime', { method: update_evaluator_firstime, permits: Permissions.PLATFORM })
	putMap.set('evaluator', { method: update_evaluator, permits: Permissions.PLATFORM })
	/**
	 * @api {delete} api/configuration/user Delete user information
	 * @apiName Deleteuser
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} picture 
	 * @apiParam {String} name 
	 * @apiParam {String} secondname 
	 * @apiParam {String} lastname 
	 * @apiParam {String} secondlastname 
	 * @apiParam {String} email 
	 * @apiParam {String} phone 
	 * @apiParam {String} extension 
	 * @apiParam {String} mobile 
	 * @apiParam {String} organization 
	 * @apiParam {String} ocupation 
	 * @apiParam {String} education_level 
	 * @apiParam {Boolean} tmp_pwd 
	 * @apiParam {Number} points 
	 * @apiParam {Boolean} active 
	 * @apiParam {Boolean} verified 
	 * @apiParam {Boolean} terms 
	 * @apiParam {Boolean} newsletter 
	 * @apiParam {Date} timestamp 
	 * @apiParam {Number} id_availability 
	 * @apiParam {Number} id_city 
	 * @apiParam {Number} id_region 
	 * @apiParam {Number} id_country 
	 * @apiParam {String} document 
	 * @apiParam {Number} id_type_document 
	 * @apiParam {Array} roles 
	 * @apiParam {Array} categories 
	 * @apiParam {Array} topics 
	 * @apiParam {Object} availability 
	 * @apiParam {Object} city 
	 * @apiParam {Object} type_document 
 	 * 
	 */
	var delete_entity_user = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_entity_user.delete(body,{id:body.id})
	}
	/**
	 * @api {delete} api/configuration/role Delete role information
	 * @apiName Deleterole
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var delete_role = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_role.delete(body,{id:body.id})
	}
	/**
	 * @api {delete} api/configuration/availability Delete availability information
	 * @apiName Deleteavailability
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var delete_availability = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_availability.delete(body,{id:body.id})
	}
	/**
	 * @api {delete} api/configuration/level Delete level information
	 * @apiName Deletelevel
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var delete_level = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_level.delete(body,{id:body.id})
	}
	/**
	 * @api {delete} api/configuration/user_category Delete user_category information
	 * @apiName Deleteuser_category
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id_user 
	 * @apiParam {Number} id_category 
 	 * 
	 */
	var delete_user_category = function (user, body) {
		if (!body.id_user) {
			throw utiles.informError(400)
		}
		return model_user_category.delete(body,{id_user:body.id_user})
	}
	/**
	 * @api {delete} api/configuration/user_questiontopic Delete user_questiontopic information
	 * @apiName Deleteuser_questiontopic
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id_user 
	 * @apiParam {Number} id_topic 
 	 * 
	 */
	var delete_user_questiontopic = function (user, body) {
		if (!body.id_user) {
			throw utiles.informError(400)
		}
		return model_user_questiontopic.delete(body,{id_user:body.id_user})
	}
	/**
	 * @api {delete} api/configuration/permission Delete permission information
	 * @apiName Deletepermission
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var delete_permission = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_permission.delete(body,{id:body.id})
	}
	/**
	 * @api {delete} api/configuration/permission_role Delete permission_role information
	 * @apiName Deletepermission_role
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id_role 
	 * @apiParam {Number} id_permission 
	 * @apiParam {Object} permission 
	 * @apiParam {Object} role 
 	 * 
	 */
	var delete_entity_permission_role = function (user, body) {
		if (!body.id_role) {
			throw utiles.informError(400)
		}
		return model_entity_permission_role.delete(body,{id_role:body.id_role})
	}
	/**
	 * @api {delete} api/configuration/user_role Delete user_role information
	 * @apiName Deleteuser_role
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id_user 
	 * @apiParam {Number} id_role 
	 * @apiParam {Object} user 
	 * @apiParam {Object} role 
 	 * 
	 */
	var delete_entity_user_role = function (user, body) {
		if (!body.id_user) {
			throw utiles.informError(400)
		}
		return model_entity_user_role.delete(body,{id_user:body.id_user})
	}
	/**
	 * @api {delete} api/configuration/config Delete config information
	 * @apiName Deleteconfig
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} header 
	 * @apiParam {String} address 
	 * @apiParam {String} postal_code 
	 * @apiParam {String} phone 
	 * @apiParam {String} free_phone 
	 * @apiParam {String} anticorruption_phone 
	 * @apiParam {String} email_PQRS 
	 * @apiParam {String} schedulle 
 	 * 
	 */
	var delete_config = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_config.delete(body,{id:body.id})
	}
	/**
	 * @api {delete} api/configuration/type_document Delete type_document information
	 * @apiName Deletetype_document
	 * @apiGroup configuration
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var delete_type_document = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_type_document.delete(body,{id:body.id})
	}
	deleteMap.set('user', { method: delete_entity_user, permits: Permissions.ADMIN })
	deleteMap.set('role', { method: delete_role, permits: Permissions.ADMIN })
	deleteMap.set('availability', { method: delete_availability, permits: Permissions.ADMIN })
	deleteMap.set('level', { method: delete_level, permits: Permissions.ADMIN })
	deleteMap.set('user_category', { method: delete_user_category, permits: Permissions.ADMIN })
	deleteMap.set('user_questiontopic', { method: delete_user_questiontopic, permits: Permissions.ADMIN })
	deleteMap.set('permission', { method: delete_permission, permits: Permissions.ADMIN })
	deleteMap.set('permission_role', { method: delete_entity_permission_role, permits: Permissions.ADMIN })
	deleteMap.set('user_role', { method: delete_entity_user_role, permits: Permissions.ADMIN })
	deleteMap.set('config', { method: delete_config, permits: Permissions.ADMIN })
	deleteMap.set('type_document', { method: delete_type_document, permits: Permissions.ADMIN })
	var params = [getMap, postMap, putMap, deleteMap]
	BaseController.apply(this, params)
	//---------------------------------------------------------------
	return this;
}
util.inherits(configuration_controller, BaseController)
module.exports = configuration_controller
