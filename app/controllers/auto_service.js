/**  * CONTROLLER AUTO_GENERATED BY DMT-GENERATOR
 * service
 * DMT 2017
 * GENERATED: 18 / 8 / 2017 - 12:1:36
 **/
var BaseController = require('../utils/controller.js')
var util = require('util');
var utiles = require('../utils/utiles.js')
var Errors = require('../utils/errors.js')
var Permissions = require('../utils/permissions.js')
var Auth_ctrl = require('./auth.js')
var entity_service = require('../models/entity_service.js')
var category = require('../models/category.js')
var questiontopic = require('../models/questiontopic.js')
var entity_form = require('../models/entity_form.js')
var type = require('../models/type.js')
var question = require('../models/question.js')
var Service_status = require('../models/service_status.js')
var Institution_user = require('../models/institution_user.js')
var Service_comment = require('../models/service_comment.js')
var Media = require('../models/media.js')
var Institution = require('../models/institution.js')
var user_answer = require('../models/user_answer.js')
var user = require('../models/user.js')
var Points = require('../models/points.js')
var Motives = require('../models/motives.js')
var category_questions = require('../models/category_questions.js')
var service = require('../models/service.js')
var hall_of_fame = require('../models/hall_of_fame.js')
var evaluation_request = require('../models/evaluation_request.js')
var entity_service_status = require('../models/entity_service_status.js')
var service_controller = function () {
	var model_entity_service = new entity_service()
	var model_category = new category()
	var model_questiontopic = new questiontopic()
	var model_entity_form = new entity_form()
	var model_type = new type()
	var model_question = new question()
    var model_service_comment = new Service_comment()
    var service_status = new Service_status()
    var institution_user = new Institution_user()
    var model_media = new Media()
    var model_institution = new Institution()
    var model_user_answer = new user_answer()
    var model_user = new user()
    var model_points = new Points()
    var model_motives = new Motives()
    var model_category_questions = new category_questions()
    var model_service = new service()
    var model_hall_of_fame = new hall_of_fame()
		var model_evaluation_request = new evaluation_request()
		var model_entity_service_status = new entity_service_status()
	//---------------------------------------------------------------
	var getMap = new Map(), postMap = new Map(), putMap = new Map(), deleteMap = new Map()
	var _get = function(model,user,params){
		let key = model.getPrimaryKey()
		if (params.filter_field) {
			if (typeof params.filter_field == 'string') {
				params.filter_field = [params.filter_field]
				params.filter_value = [params.filter_value]
			}
		} else {
			params.filter_field = []
			params.filter_value = []
		}
		if (params[key]) {
			params.filter_field.push(key)
			params.filter_value.push(params[key])
		}
		return model.getAll({
			filter: params.filter,
			limit: params.limit,
			page: params.page,
			order: params.order,
			filter_fields: params.filter_field,
			filter_values: params.filter_value,
			fields: params.field,
			lang: params.lang
		})
	}
	/**
	 * @api {get} api/service/service Request service information
	 * @apiName Getservice
	 * @apiGroup service
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id service unique ID.
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"id": 7,
	 *		"name": "This is an example text",
	 *		"url": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sit amet tortor quis turpis cursus tristique.",
	 *		"id_user": 27,
	 *		"hash": "This is an example text",
	 *		"rate": 92,
	 *		"test_user": "This is an example text",
	 *		"test_password": "This is an example text",
	 *		"is_active": 0,
	 *		"is_product": 0,
	 *		"is_service": 0,
	 *		"timestamp": "1969-05-20",
	 *		"roles": [
	 *			{
	 *				"id": 84,
	 *				"name": "This is an example text"
	 *			}
	 *		],
	 *		"category": {
	 *			"id": 88,
	 *			"name": "This is an example text"
	 *		},
	 *		"institution": {
	 *			"id": 40,
	 *			"name": "This is an example text",
	 *			"nit": "This is an example text",
	 *			"address": "This is an example text",
	 *			"website": "This is an example text",
	 *			"email": "This is an example text",
	 *			"second_email": "This is an example text",
	 *			"phone": "This is an example text",
	 *			"extension_phone": "This is an example text",
	 *			"head_sector": 0,
	 *			"timestamp": "1969-05-20",
	 *			"designation_act": "This is an example text",
	 *			"legalrep_name": "This is an example text",
	 *			"legalrep_secondname": "This is an example text",
	 *			"legalrep_lastname": "This is an example text",
	 *			"legalrep_secondlastname": "This is an example text",
	 *			"legalrep_document": "This is an example text",
	 *			"legalrep_typedoc": 12,
	 *			"legalrep_email": "This is an example text",
	 *			"legalrep_phone": "This is an example text",
	 *			"legalrep_mobile": "This is an example text",
	 *			"id_country": 58,
	 *			"city": {
	 *				"id": 77,
	 *				"name": "This is an example text",
	 *				"code": "This is an example text",
	 *				"latitude": 81,
	 *				"longitude": 74,
	 *				"region": {
	 *					"id": 81,
	 *					"name": "This is an example text",
	 *					"id_capital": 24,
	 *					"id_country": 39,
	 *					"code": "This is an example text"
	 *				}
	 *			},
	 *			"region": {
	 *				"id": 94,
	 *				"name": "This is an example text",
	 *				"id_capital": 48,
	 *				"id_country": 80,
	 *				"code": "This is an example text"
	 *			},
	 *			"creator": {
	 *				"id": 97,
	 *				"picture": "This is an example text",
	 *				"name": "This is an example text",
	 *				"secondname": "This is an example text",
	 *				"lastname": "This is an example text",
	 *				"secondlastname": "This is an example text",
	 *				"email": "This is an example text",
	 *				"phone": "This is an example text",
	 *				"extension": "This is an example text",
	 *				"mobile": "This is an example text",
	 *				"organization": "This is an example text",
	 *				"ocupation": "This is an example text",
	 *				"education_level": "This is an example text",
	 *				"tmp_pwd": 0,
	 *				"points": 40,
	 *				"active": 0,
	 *				"verified": 0,
	 *				"terms": 1,
	 *				"newsletter": 0,
	 *				"timestamp": "1969-05-20",
	 *				"id_region": 72,
	 *				"id_country": 37,
	 *				"document": "This is an example text",
	 *				"availability": {
	 *					"id": 94,
	 *					"name": "This is an example text"
	 *				},
	 *				"city": {
	 *					"id": 2,
	 *					"name": "This is an example text",
	 *					"code": "This is an example text",
	 *					"latitude": 4,
	 *					"longitude": 97,
	 *					"region": {
	 *						"id": 5,
	 *						"name": "This is an example text",
	 *						"id_capital": 75,
	 *						"id_country": 36,
	 *						"code": "This is an example text"
	 *					}
	 *				},
	 *				"type_document": {
	 *					"id": 46,
	 *					"name": "This is an example text"
	 *				}
	 *			}
	 *		},
	 *		"history": [
	 *			{
	 *				"level": 0,
	 *				"valid_to": "1969-05-20",
	 *				"timestamp": "1969-05-20",
	 *				"status": {
	 *					"id": 33,
	 *					"name": "This is an example text"
	 *				}
	 *			}
	 *		],
	 *		"status": {
	 *			"id": 87,
	 *			"name": "This is an example text",
	 *			"duration": 63,
	 *			"pre_end": 72,
	 *			"alert": 0
	 *		},
	 *		"comments": [
	 *			{
	 *				"id": 51,
	 *				"text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sit amet tortor quis turpis cursus tristique.",
	 *				"rate": 73,
	 *				"timestamp": "1969-05-20",
	 *				"user": {
	 *					"id": 84,
	 *					"picture": "This is an example text",
	 *					"name": "This is an example text",
	 *					"secondname": "This is an example text",
	 *					"lastname": "This is an example text",
	 *					"secondlastname": "This is an example text",
	 *					"email": "This is an example text",
	 *					"phone": "This is an example text",
	 *					"extension": "This is an example text",
	 *					"mobile": "This is an example text",
	 *					"organization": "This is an example text",
	 *					"ocupation": "This is an example text",
	 *					"education_level": "This is an example text",
	 *					"tmp_pwd": 0,
	 *					"points": 37,
	 *					"active": 1,
	 *					"verified": 1,
	 *					"terms": 0,
	 *					"newsletter": 1,
	 *					"timestamp": "1969-05-20",
	 *					"id_region": 13,
	 *					"id_country": 90,
	 *					"document": "This is an example text",
	 *					"availability": {
	 *						"id": 2,
	 *						"name": "This is an example text"
	 *					},
	 *					"city": {
	 *						"id": 95,
	 *						"name": "This is an example text",
	 *						"code": "This is an example text",
	 *						"latitude": 93,
	 *						"longitude": 96,
	 *						"region": {
	 *							"id": 72,
	 *							"name": "This is an example text",
	 *							"id_capital": 80,
	 *							"id_country": 36,
	 *							"code": "This is an example text"
	 *						}
	 *					},
	 *					"type_document": {
	 *						"id": 98,
	 *						"name": "This is an example text"
	 *					}
	 *				}
	 *			}
	 *		],
	 *		"requirements": [
	 *			{
	 *				"id": 47,
	 *				"name": "This is an example text",
	 *				"timestamp": "1969-05-20",
	 *				"category": {
	 *					"id": 32,
	 *					"name": "This is an example text"
	 *				}
	 *			}
	 *		]
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_entity_service = function (user, params) {
		return _get(model_service,user,params)
	}
	/**
	 * @api {get} api/service/category Request category information
	 * @apiName Getcategory
	 * @apiGroup service
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id category unique ID.
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"id": 45,
	 *		"name": "This is an example text"
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_category = function (user, params) {
		return _get(model_category,user,params)
	}
	/**
	 * @api {get} api/service/questiontopic Request questiontopic information
	 * @apiName Getquestiontopic
	 * @apiGroup service
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id questiontopic unique ID.
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"id": 55,
	 *		"name": "This is an example text",
	 *		"id_usertype": 23,
	 *		"id_category": 35
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_questiontopic = function (user, params) {
		return _get(model_questiontopic,user,params)
	}
	/**
	 * @api {get} api/service/form Request form information
	 * @apiName Getform
	 * @apiGroup service
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id form unique ID.
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"id": 9,
	 *		"name": "This is an example text",
	 *		"timestamp": "1969-05-20",
	 *		"category": {
	 *			"id": 58,
	 *			"name": "This is an example text"
	 *		}
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_entity_form = function (user, params) {
		return _get(model_entity_form,user,params)
	}
	/**
	 * @api {get} api/service/type Request type information
	 * @apiName Gettype
	 * @apiGroup service
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id type unique ID.
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"id": 40,
	 *		"name": "This is an example text"
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_type = function (user, params) {
		return _get(model_type,user,params)
	}
	/**
	 * @api {get} api/service/question Request question information
	 * @apiName Getquestion
	 * @apiGroup service
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id question unique ID.
	 * @apiParam {String} filter Texto to search into DB.
	 * @apiParam {Array} fields Fields where the search have to be fetched.
	 * @apiParam {Number} limit number of items per page.
	 * @apiParam {Number} page number of the page to be fetched.
	 * @apiParam {Number} field to order the results.
	 * @apiParam {Array} filter_field used with filter_value to make specific filters into the data.
	 * @apiParam {Array} filter_value used with filter_field to make specific filters into the data.
	 * @apiParam {String} lang id of the language to get content if available.
	 * 
	 * @apiSuccessExample Success-Response:
	 * HTTP/1.1 200 OK
	 * {
	 * 	data:{
	 *		"id": 95,
	 *		"id_topic": 8,
	 *		"level": 82,
	 *		"text": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sit amet tortor quis turpis cursus tristique.",
	 *		"criteria": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sit amet tortor quis turpis cursus tristique.",
	 *		"evidence": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sit amet tortor quis turpis cursus tristique.",
	 *		"legal_support": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sit amet tortor quis turpis cursus tristique.",
	 *		"help": "Lorem ipsum dolor sit amet, consectetur adipiscing elit. Duis sit amet tortor quis turpis cursus tristique."
	 *	},
	 * 	total_results:1
	 * }
	*/
	var get_question = function (user, params) {
		return _get(model_question,user,params)
	}
    /**
     * @api {get} api/service/service_category Request service information
     * @apiName Getservice
     * @apiGroup service
     * @apiVersion 1.0.1
     */
    var get_entity_service_category = function(user, params) {
        return _get(model_entity_service, user, { filter_field: "id_category", filter_value: "1" })
    }

    /**
     * @api {get} api/service/service_institution_name Request service information
     * @apiName Getservice
     * @apiGroup service
     * @apiVersion 1.0.1
     */
    var get_entity_service_institution_name = function(user, params) {
        return _get(model_entity_service, user, { filter_field: "institution_name", filter_value: "Pepito" })
    }

    /**
     * @api {get} api/service/service_name Request service information
     * @apiName Getservice
     * @apiGroup service
     * @apiVersion 1.0.1
     */
    var get_entity_service_name = function(user, params) {
        return _get(model_entity_service, user, { filter_field: "institution_name", filter_value: "Pepito" })
    }

    var get_filtered_list_institutions = function(user, params) {
		var query = `
SELECT DISTINCT
i.id AS id_institution,
i.name AS name, 
s.id AS id_service,
s.name AS service_name,
s.url AS url,
s.timestamp as publication_date,
ss.timestamp AS certification_date
FROM stamp.institution AS i
JOIN stamp.service AS s ON i.id = s.id_institution
JOIN stamp.service_status AS ss ON ss.id_service = s.id
WHERE s.id_category = ${params.id_category}\n`
		// Insert filter institution name to query
		if (params.name)
			query += `AND i.name LIKE "%${params.name}%"\n`
		// Insert filter service name to query
		if (params.service_name)
			query += `AND s.name LIKE "%${params.service_name}%"\n`
		// Insert filter name to query
		if (params.date0) {
			var date0 = params.date0.split("-")
			var date0_0 = new Date(parseInt(date0[0]), parseInt(date0[1]) - 1, parseInt(date0[2]) - 3) // Month starts from 0
			date0_0 = date0_0.toISOString().slice(0, 10)
			var date0_1 = new Date(parseInt(date0[0]), parseInt(date0[1]) - 1, parseInt(date0[2]) + 3) // One week interval 6 days
			date0_1 = date0_1.toISOString().slice(0, 10)
			query += `AND s.timestamp >= "${date0_0}" AND s.timestamp <= "${date0_1}"\n`
		}
		// Insert filter name to query
		if (params.date1) {
			var date1 = parseInt(params.date1.split("-"))
			var date1_0 = new Date(date1[0], date1[1]-1, date1[2]-3) // Month starts from 0
			date1_0.toISOString().substring(0, 10);
			var date1_1 = new Date(date1[0], date1[1]-1, date1[2]+3) // One week interval 6 days
			date1_1.toISOString().substring(0, 10);
			query += `AND s.datetime >= ${date1_0} AND s.datetime <= ${date1_1}\n`
		}
		query += 'AND s.current_status = 8 ORDER BY ss.timestamp DESC;'
		console.log(query)
        return model_institution.customQuery(query)
    }
	
    var get_filtered_list_institutions_csv = function(user, params) {
		var query = `
SELECT
i.name AS name, 
s.name AS service_name,
s.url AS url,
s.timestamp as publication_date
ss.timestamp AS certification_date
FROM stamp.institution AS i
JOIN stamp.service AS s ON i.id = s.id_institution
JOIN stamp.service_status AS ss ON ss.id_service = s.id
WHERE s.id_category = ${params.id_category}\n`
		// Insert filter institution name to query
		if (params.name)
			query += `AND i.name LIKE "%${params.name}%"\n`
		// Insert filter service name to query
		if (params.service_name)
			query += `AND s.name LIKE "%${params.service_name}%"\n`
		// Insert filter name to query
		if (params.date0) {
			var date0 = params.date0.split("-")
			var date0_0 = new Date(parseInt(date0[0]), parseInt(date0[1]) - 1, parseInt(date0[2]) - 3) // Month starts from 0
			date0_0 = date0_0.toISOString().slice(0, 10)
			var date0_1 = new Date(parseInt(date0[0]), parseInt(date0[1]) - 1, parseInt(date0[2]) + 3) // One week interval 6 days
			date0_1 = date0_1.toISOString().slice(0, 10)
			query += `AND s.timestamp >= "${date0_0}" AND s.timestamp <= "${date0_1}"\n`
		}
		// Insert filter name to query
		if (params.date1) {
			var date1 = parseInt(params.date1.split("-"))
			var date1_0 = new Date(date1[0], date1[1]-1, date1[2]-3) // Month starts from 0
			date1_0.toISOString().substring(0, 10);
			var date1_1 = new Date(date1[0], date1[1]-1, date1[2]+3) // One week interval 6 days
			date1_1.toISOString().substring(0, 10);
			query += `AND s.datetime >= ${date1_0} AND s.datetime <= ${date1_1}\n`
		}
		query += 'AND s.current_status = 8 ORDER BY ss.timestamp DESC;'
		return model_institution.customQuery(query).then((filtered_list) => {
			return utiles.JSONToCSVConvertor(filtered_list, "Entidades Certificadas", true);
		})
    }

    var list_certified_services = function(user, params) {
			var query = `
	SELECT 
	s.name AS name, 
	c.name as category, 
	ss.level AS level, 
	s.timestamp
	FROM stamp.user AS u
	JOIN stamp.institution_user AS iu ON iu.id_user = u.id
	JOIN stamp.service AS s ON s.id_institution = iu.id_institution
	JOIN stamp.service_status AS ss ON ss.id_service = s.id
	JOIN stamp.category AS c ON c.id = s.id_category
	WHERE u.id = ${user.id}
	AND s.current_status = 8;`
					return model_institution.customQuery(query)
			}
	
	
			
			var list_rejected_services = function(user, params) {
					var query = `
	SELECT 
	s.name AS name, 
	c.name as category, 
	ss.level AS level, 
	s.timestamp
	FROM stamp.user AS u
	JOIN stamp.institution_user AS iu ON iu.id_user = u.id
	JOIN stamp.service AS s ON s.id_institution = iu.id_institution
	JOIN stamp.service_status AS ss ON ss.id_service = s.id
	JOIN stamp.category AS c ON c.id = s.id_category
	WHERE u.id = ${user.id}
	AND s.current_status = 9;`
					return model_institution.customQuery(query)
			}
	
			var list_in_progress_services = function(user, params) {
					var query = `
	SELECT 
	s.name AS name, 
	c.name as category, 
	ss.level AS level, 
	s.timestamp
	FROM stamp.user AS u
	JOIN stamp.institution_user AS iu ON iu.id_user = u.id
	JOIN stamp.service AS s ON s.id_institution = iu.id_institution
	JOIN stamp.service_status AS ss ON ss.id_service = s.id
	JOIN stamp.category AS c ON c.id = s.id_category
	WHERE u.id = ${user.id}
	AND s.current_status <= 6;`
					return model_institution.customQuery(query)
			}

	var get_service_info = function(user, params) {
		var query = `
		SELECT 
		i.name AS name_institution,
		s.name AS name_service,
		ss.level AS level,
		s.timestamp AS postulation_date,
		s.datetime AS certificaton_date,
		s.url AS url, 
		st.name AS status, 
		s.rate AS rate,
		(SELECT COUNT(sc.id) FROM stamp.service_comment AS sc WHERE sc.id_service = "${params.id_service}") AS votes
		FROM stamp.service AS s
		JOIN stamp.institution AS i ON i.id = s.id_institution
		JOIN stamp.service_status AS ss ON ss.id_service = s.id
		JOIN stamp.status AS st ON st.id = ss.id_status
		JOIN stamp.category AS c ON c.id = s.id_category
		WHERE s.id = "${params.id_service}";`
		return model_institution.customQuery(query);
	}

    var get_service_comments = function(user, params) {
        var query = `
SELECT stamp.user.name AS name_user,
stamp.service_comment.timestamp AS date,
stamp.service_comment.text AS text
FROM stamp.service
JOIN stamp.service_comment ON stamp.service_comment.id_service = stamp.service.id
JOIN stamp.user ON stamp.user.id = stamp.service_comment.id_user
WHERE stamp.service_comment.id_service = ${params.id_service}
;`
        return model_institution.customQuery(query);
    }

    var get_service_process = function(user, params) {
        var query1 = `
SELECT stamp.service.name AS name_service,
stamp.category.name AS name_category,
stamp.service.id_level AS level,
stamp.service.timestamp AS date_postulation,
stamp.service.url AS url,
stamp.service_status.id_status AS status,
stamp.institution.name AS name_entity
FROM stamp.service
JOIN stamp.service_status on stamp.service_status.id_service = stamp.service.id
JOIN stamp.category ON stamp.service.id_category = stamp.category.id
JOIN stamp.institution ON stamp.service.id_institution = stamp.institution.id
WHERE stamp.service.id = ${params.id_service};`
        return model_institution.customQuery(query1)
    }

    /* Se listará los servicios elegibles a evaluar, finalmente, solo deben ser mostradas
     * aquellas en las cuales el evaluador es apto.
     *
     * token -> solo se mostrará aquellos en los cuales el usuario es apto para evaluar
     * params -> serán los parámetros con los cuales se harán los filtros.
     * params
     * 	name_entity
     * 	region	(place)
     * 	category	(categoría del servicio)
     * 	level	(nivel del servicio)
     */
    var get_filtered_list_services_for_select = function(token, params) {
        var query = `SELECT DISTINCT ser.name, ins.name as institution, ser.id_category, ser.timestamp
FROM stamp.service ser
RIGHT JOIN stamp.institution ins ON ser.id_institution = ins.id
RIGHT JOIN stamp.region reg ON ins.id_region = reg.id `
        if (params.name_institution || params.id_region || params.id_category || params.id_level) {
            // Un servicio postulado es status 3, status 1, es cuando hasta ahora se está postulando
            query += "WHERE ser.current_status = 3 "
            if (params.name_institution != undefined) {
                query += `AND ins.name LIKE "%${params.name_institution}%" `
            }
            if (params.id_region != undefined) {
                query += "AND reg.id = " + parseInt(params.id_region) + " "
            }
            if (params.id_category != undefined) {
                query += "AND ser.id_category = " + parseInt(params.id_category) + " "
            }
            if (params.id_level != undefined) {
                query += "AND ser.id_level = " + parseInt(params.id_level) + " "
            }
        }
        query += ";"
        return model_entity_service.customQuery(query)
    }

    var list_users_admin = function(user, body) {
        var query = `
SELECT stamp.user.id AS id_user,
CONCAT(stamp.user.name, ' ', stamp.user.lastname) AS name,
stamp.user.email AS email,
stamp.user.active AS active,
stamp.user.timestamp AS timestamp
FROM stamp.user
JOIN stamp.user_role ON stamp.user_role.id_user = stamp.user.id
WHERE stamp.user_role.id_role = 1
;`
        return model_entity_service.customQuery(query)
    }

    var list_postulations_admin = function(user, body) {
        var query = `
SELECT 
stamp.institution.name AS name_institution,
stamp.service.name AS name_service,
stamp.category.name AS name_category,
stamp.service.id_level AS level,
stamp.status.name AS service_status,
# WARNING: FALTA IS_ACTIVE EN SERVICES !!!
stamp.service.timestamp AS postulation_date,
stamp.service.id AS id_service
FROM stamp.institution
JOIN stamp.institution_user ON stamp.institution_user.id_institution = stamp.institution.id
JOIN stamp.service ON stamp.service.id_user = stamp.institution_user.id_user
JOIN stamp.category ON stamp.category.id = stamp.service.id_category
JOIN stamp.service_status ON stamp.service_status.id_service = stamp.service.id
JOIN stamp.status ON stamp.status.id = stamp.service.current_status
;`
        return model_entity_service.customQuery(query)
    }

    var list_requisites_admin = function(user, body) {
        var query = `
SELECT stamp.user_answer.id_question AS id_question,
stamp.questiontopic.name AS questiontopic,
stamp.evaluation_request.id_request_status AS id_request_status,
stamp.user.name AS name_evaluator,
stamp.user.lastname AS lastname_evaluator,
stamp.evaluation_request.result AS result,
# WARNING: ALERTS MISSING
stamp.user_answer.id AS id_user_answer
FROM stamp.service
JOIN stamp.user_answer ON stamp.user_answer.id_service = stamp.service.id
JOIN stamp.evaluation_request ON stamp.evaluation_request.id_service = stamp.user_answer.id_service
JOIN stamp.questiontopic ON stamp.questiontopic.id = stamp.user_answer.id_topic
JOIN stamp.user ON stamp.user.id = stamp.evaluation_request.id_user
WHERE stamp.service.id = ${body.id_service}
;`
        return model_entity_service.customQuery(query)
    }

    /*var get_requisite_info = function (user, body) {
    	var query = `
    	
    	`
    }*/

    var get_evaluators_admin = function(user, body) {
        var query = `
SELECT stamp.user.id AS id_user,
stamp.user.name AS name,
stamp.user.secondname AS secondname,
stamp.user.lastname AS lastname,
stamp.user.secondlastname AS secondlastname,
stamp.user.phone AS phone,
stamp.user.mobile AS mobile,
stamp.type_document.name AS type_document,
stamp.user.document AS document,
stamp.user.email AS email,
#stamp.city.name AS city,
#stamp.region.name AS region,
#stamp.country.name AS country,
stamp.user.organization AS organization,
stamp.user.ocupation AS ocupation,
stamp.availability.name AS availability,
stamp.category.name AS category,
stamp.level.name AS level
FROM stamp.user
JOIN stamp.availability ON stamp.availability.id = stamp.user.id_availability
JOIN stamp.user_category ON stamp.user_category.id_user = stamp.user.id
JOIN stamp.category ON stamp.category.id = stamp.user_category.id_category
JOIN stamp.level ON stamp.level.id = stamp.user.id_level
JOIN stamp.type_document ON stamp.type_document.id = stamp.user.id_type_document
#JOIN stamp.city ON stamp.city.id = stamp.user.id_city
#JOIN stamp.region ON stamp.region.id = stamp.user.id_region
#JOIN stamp.country ON stamp.country.id = stamp.user.id_country
;`
        return model_entity_service.customQuery(query).then((evaluators) => {
            var result = [] // Lista final a retornar
            var current_list = [] // Lista del información del usuario actual
            var category_list = [] // Lista de las categorias de un usuario
            let id_user = evaluators[0].id_user // Usuario actual
            for (var i in evaluators) {
                console.log("i")
                console.log(i)
                    // Se dió na transición a un nuevo evaluador
                if ((evaluators[i].id_user == id_user) && (category_list == [])) {
                    for (var j in evaluators[i]) {
                        console.log("j")
                        console.log(j)
                        if (j == "category") {
                            category_list.push(evaluators[i][j])
                            continue
                        }


                    }
                } else {
                    id_user = evaluators[i].id_user
                    for (var j in evaluators[i]) {
                        if (j == "category")
                            continue

                    }
                }
            }
        })
    }

    /*
     * Obtener lista de motivos para puntos
     */
    var get_list_motive = function(user, params) {
        return _get(model_motives, user, params)
    }

    /* 
     * Obtener elemento de la tabla points entidades-evaluadores
     * obtiene la lista de puntos perdidos desde el más reciente hasta el último
     * muestra el puntaje total más reciente.
     * Obtiene el historial de los puntajes (total)
     */
    var get_points_user = function(user, params) {
        var query = ""
        var message = ""
        if (params.points_lost != undefined && params.id_user != undefined) { // Puntos perdidos?
            message = "Puntos perdidos"
            query = `SELECT *
FROM stamp.points q WHERE q.id_user = ${parseInt(params.id_user)}  AND q.value < 0 ORDER BY id DESC;`
        } else if (params.points_total != undefined && params.id_user != undefined) { //historial de puntos?
            message = "Historial de puntos"
            query = `SELECT *
FROM stamp.points q WHERE q.id_user = ${parseInt(params.id_user)} ORDER BY id DESC;`
        } else if (params.id_motives != undefined && params.id_user != undefined) { //filtración por motivo e id_user
            query = `SELECT *
FROM stamp.points q WHERE q.id_user = ${parseInt(params.id_user)} AND q.id_motives = ${parseInt(params.id_motives)} ORDER BY id DESC;`
        } else if (params.id_user != undefined) { //puntos en total
            message = "Total de puntos"
            query = `SELECT *
FROM
stamp.points p WHERE p.id =( SELECT MAX(id)
FROM stamp.points q WHERE q.id_user = ${parseInt(params.id_user)});`
        } else {
            return { message: "no asignó un usuario con qué consultar" }
        }
        if (query != "") {
            return model_points.customQuery(query).then((list_points) => {
                if (params.id_motives == undefined) {
                    return { message: message, total: list_points.length, list_points: list_points }
                } else {
                    var params_motives = []
                    params_motives.filter_field = "id"
                    params_motives.filter_value = params.id_motives
                    return get_list_motive(user, params_motives).then((motive) => {
                        return { message: "Filtrado por motivo " + motive.data[0].name, total: list_points.length, list_points: list_points }
                    })
                }
            })
        }
    }

    /**
     * Muestra las preguntas que debe calificar el ciudadano proporcionando
     * el id del servicio.
     * 
     * /service/questions_calification?id_service=1
     */
    var get_questions_calificate_citizien = function(token, params) {
        var query = ""
        if (params.id_service) {
            query = `
SELECT DISTINCT cq.text FROM stamp.category_questions cq 
RIGHT JOIN stamp.service s ON s.id_category = cq.id_category AND s.id = '${params.id_service}' AND cq.text IS NOT NULL; `
            console.log(query)
        }
        return model_category_questions.customQuery(query).then(function(preguntas) {
            var encuesta = []
            for (var i in preguntas){
                if(preguntas[i].text != null)
					encuesta.push(preguntas[i].text)
            }
            return encuesta
        });
    }

	var get_all_services = function (token, params){
		return model_service.getAll(params);
    }
    
		var get_institution_info = function (user, body) {
			var query = `
				SELECT 
				i.*, 
				td.name AS type_document,
				c.name AS city,
				r.name AS region
				FROM stamp.institution AS i
				JOIN stamp.type_document AS td ON td.id = i.legalrep_typedoc
				JOIN stamp.city AS c ON c.id = i.id_city
				JOIN stamp.region AS r ON r.id = i.id_region
				WHERE i.id = "${body.id_institution}";
			`
			return model_institution.customQuery(query)
		}

	var get_institution_service = function (user, body) {
		var query = `
SELECT 
s.*,
c.name AS category,
ss.level AS level,
st.name AS status
FROM stamp.institution AS i
JOIN stamp.service AS s ON s.id_institution = i.id
JOIN stamp.category AS c ON c.id = s.id_category
JOIN stamp.service_status AS ss ON ss.id_service = s.id
JOIN stamp.status AS st ON st.id = ss.id_status
WHERE i.id = "${body.id_institution}"
;`
		return model_service.customQuery(query)
	}

	var get_institution_service_certified = function (user, body) {
		var query = `
SELECT 
s.*,
c.name AS category,
ss.level AS level,
st.name AS status
FROM stamp.institution AS i
JOIN stamp.service AS s ON s.id_institution = i.id
JOIN stamp.category AS c ON c.id = s.id_category
JOIN stamp.service_status AS ss ON ss.id_service = s.id
JOIN stamp.status AS st ON st.id = ss.id_status
WHERE i.id = "${body.id_institution}"
AND ss.id_status >= 7
;`
		return model_service.customQuery(query)
    }
    
    var get_hall_csv = function(user, params) {
			var query = ""
			if (params.date_begin != undefined && params.date_end != undefined ){
				query = `SELECT h_f.name, r.name as role, h_f.ranking, h_f.date, h_f.points
FROM stamp.hall_of_fame h_f
JOIN stamp.role r ON h_f.id_role = r.id WHERE h_f.date >= '${params.date_begin}' AND h_f.date <= '${params.date_end}';` 
			}else{
				return { message : "debe agregar un date_begin y date_end para generar csv del hall de la fama" }
			}
      return model_hall_of_fame.customQuery(query).then((hall) => {
				return utiles.JSONToCSVConvertor(hall, "Hall de la Fama", true);
			})
	}
	
	var get_questions_category = function(user, body){
		var query = `
SELECT 
cq.*,
s.rate,
(SELECT COUNT(sc.id) FROM stamp.service_comment AS sc WHERE sc.id_service = "${body.id_service}") AS votes
FROM stamp.service AS s
JOIN stamp.category AS c ON c.id = s.id_category
JOIN stamp.category_questions AS cq ON cq.id_category = c.id
WHERE s.id = "${body.id_service}";`
		return model_category_questions.customQuery(query)
	}

	var list_institutions_admin = function (user, body) {
		var query = `
SELECT 
i.id_institution AS id_institution,
u.name AS name,
u.points AS points,
u.timestamp AS register_date,
(SELECT COUNT(s.name)
FROM stamp.user AS us
JOIN stamp.institution_user AS iu ON iu.id_user = us.id
JOIN stamp.service AS s ON s.id_institution = iu.id_institution
JOIN stamp.service_status AS ss ON ss.id_service = s.id
JOIN stamp.category AS c ON c.id = s.id_category
WHERE s.id_user = u.id
AND s.current_status = 1) AS cuenta,
u.active AS active
FROM stamp.user_role AS ur
JOIN stamp.user AS u ON u.id = ur.id_user
JOIN stamp.institution_user AS i ON i.id_user = u.id
WHERE ur.id_role = 4
`		
		if(body.name != null) 
			query += `AND u.name LIKE "%${body.name}%";`
		else
			query += `;`
		return model_institution.customQuery(query)
	}

	var get_requisites_for_service = function(token, params) {
		if (params.id_service)
			var query = `
				SELECT q.id as id_question, q.text as requisite, q.legal_support as support_legal, q.criteria as justification, q.evidence as evidence, q.help as help, join2.*
				FROM stamp.question q
				#JOIN (SELECT qt.id as id_questiontopic, qt.name as name_topics, qt.id_usertype, qt.id_category, join1.level, join1.id as id_service, join1.id_user
				JOIN (SELECT qt.id as id_topic, join1.level, join1.id as id_service, join1.id_user
				FROM stamp.questiontopic qt
				RIGHT JOIN 
				(SELECT id_category, s.id, level, s.id_user
						FROM stamp.service s
					RIGHT JOIN stamp.service_status s_s ON s.id = s_s.id_service 
					WHERE s_s.id_service = '${params.id_service}') join1 
				ON qt.id_category = join1.id_category) join2 
				ON q.id_topic = join2.id_topic WHERE q.level <= join2.level ORDER BY q.id;
			`
		return model_institution.customQuery(query).then(function(requisites) {
				var data = { data: requisites, total: requisites.length }
				return data
		})
}




	var list_empty_user_answers = function (user, body) {
		var query = `
			SELECT ua.id AS id_user_answer,
			ua.id_question AS id_question,
			ua.id_service AS id_service,
			q.*
			FROM stamp.user_answer AS ua
			JOIN stamp.question AS q ON q.id = ua.id_question
			WHERE ua.id_media IS NULL
			AND ua.id_service = ${body.id_service};`
		return model_institution.customQuery(query)
	}

	// Lista con nombres 
	//
	var get_questiontopic_all = function(user, params){
		var query = `
			SELECT q_c.id, q_c.name_questiontopic, u_t.name AS usertype, q_c.name_category
			FROM
			(SELECT q.id, q.name AS name_questiontopic, q.id_usertype, c.name AS name_category
			FROM stamp.questiontopic q
			LEFT JOIN stamp.category c ON q.id_category = c.id) q_c
			LEFT JOIN stamp.usertype u_t ON q_c.id_usertype = u_t.id;
		`
		return model_user.customQuery(query)
	}

			 
	// params id_user institution
	//
	var get_services_incomplete = function(user, params){
		var query = `
			SELECT id_service, name AS name_service, url, id_category, level, c.name AS name_category, test_user, test_password
			FROM
			(SELECT id AS id_service, name AS name_service, url, id_category, level, test_user, test_password
			FROM stamp.service s
			LEFT JOIN stamp.service_status s_t ON s.id = s_t.id_service WHERE s_t.id_status = 0 AND s.id_user = ${params.id_user}) s_s
			LEFT JOIN stamp.category c ON s_s.id_category = c.id
		`
		return model_questiontopic.customQuery(query)
	}
	
	var get_certificates = function (user, body) {
			var query = `
				SELECT 
				i.name AS name_institution,
				ss.level,
				s.name AS name_service,
				s.datetime AS certification_date
				FROM stamp.service AS s
				JOIN stamp.institution AS i ON i.id = s.id_institution
				JOIN stamp.service_status AS ss ON ss.id_service = s.id
				WHERE s.id_user = ${user.id}
				AND s.current_status = 1;
			`
			return model_service.customQuery(query)
		}
			
	/**
	 * 	Muestra el progreso de los requisitos del servicio id_service 4
	 *  /api/service/requisite_progress?id_service=4
	 */
	var get_requisite_progress = function (user, params) {
		if(params){
			var query = `
				# inputs id_service
				# outputs estado de los user answer desde el administrador
				SELECT u_s.id AS id_user_answer, id_question, id_user AS id_user_creator, u_s.timestamp, id_service, id_status AS id_status_progress
				FROM (SELECT * FROM stamp.user_answer WHERE stamp.user_answer.id_service = ${params.id_service}) u_s
				LEFT JOIN stamp.media m ON u_s.id_media = m.id			`
			return model_service.customQuery(query).then(function(result){
				return {"data": result, "total": result.length}
			})
		}
	}
	/**
	 * 	Muestra el progreso y las evidencias de los requisitos del servicio id_service 4
	 *  /api/service/requisite_progress_evidence?id_service=4
	 */
	var get_requisite_progress_evidence = function (user, body) {
		if(params){
			var query = `
				SELECT u_s.id AS id_user_answer, id_question, id_user AS id_user_creator, datetime, u_s.timestamp, requisite, support_legal, justification, id_topic, evidence, help, id_service, id_status AS id_status_progress, u_s.id_media, url AS url_media, type AS type_media, m.timestamp AS timestamp_media
				FROM (SELECT * FROM stamp.user_answer WHERE stamp.user_answer.id_service = ${params.id_service}) u_s
				LEFT JOIN stamp.media m ON u_s.id_media = m.id`
			return model_service.customQuery(query).then(function(result){
				return {"data": result, "total": result.length}
			})
		}
	}
	/**
	 * 	Muestra los mensajes de los evaluadores que han rechazado los requisitos,
	 *  de tal manera que el servicio queda rechazado por estos rechazos.
	 *  /api/service/requisite_rejection_justify?id_service=4
	 */
	var get_justification_requisite_rejection = function (user, params) {
		if(params){
			var query = `
				# NOTA: todo rechazo debe tener una justificación
				# INPUT id_service
				# OUTPUT id_evaluation_request, id_user_evaluator, justify_reject
				SELECT id_service, id AS id_evaluation_request, id_user AS id_user_evaluator, justify_reject
				FROM stamp.evaluation_request w_r WHERE w_r.result = 0 AND w_r.justify_reject IS NOT NULL AND w_r.id_service = ${params.id_service};`
			return model_service.customQuery(query).then(function(result){
				return {"data": result, "total": result.length}
			})
		}
	}
	/**
	 * 	Muestra los requisitos que ya han sido evaluados 
	 *  /api/service/requisites_evaluated?id_user=1
	 */
	var get_requisites_evaluated = function (user, params) {
		if(params){
			var query = `
				# sql que retorna los requisitos evaluados desde el id del usuario creador (creador de institucion)
				# INPUT id_user_creator (institution)
				# OUTPUT user_answer (evaluados por cierre 7) comentar y descomentar según logica(evaluador por aprobados 8 o rechazados 9)
				SELECT u_a.id AS id_answer, id_question, u_a.id_user AS id_user_creator, id_status AS id_status_
				FROM stamp.user_answer u_a
				#LEFT JOIN stamp.service s ON u_a.id_service = s.id WHERE s.id_user = 10 AND (u_a.id_status = 7)
				LEFT JOIN stamp.service s ON u_a.id_service = s.id WHERE s.id_user = ${params.id_user_creator} AND (u_a.id_status = 8 OR u_a.id_status = 9)
`
			return model_service.customQuery(query).then(function(result){
				return {"data": result, "total": result.length}
			})
		}
	}

	/**
	 * 	Muestra una lista de chats entre un evaluador y una entidad a partir del usuario 
	 *  en la sesión actual
	 *  /api/service/get_chats?id_service=4&id_question=10
	 */
	var get_chats = function (user, body) {
		var query = `
			SELECT ur.id_role AS role
			FROM stamp.user_role AS ur
			WHERE ur.id_user = ${user.id};
		`
		return model_service.customQuery(query).then((role) => {
			switch(role[0].role) {
				case 4: // Entidad
					query = `
						SELECT 
						er.id AS id_evaluation_request,
						CONCAT(u.name, ' ', u.lastname) AS name,
						u.id AS id_evaluator
						FROM stamp.evaluation_request AS er
						JOIN stamp.user AS u ON u.id = er.id_user
						WHERE er.id_service = ${body.id_service}
						AND er.id_question = ${body.id_question}
						AND (er.id_request_status = 3 # Asignado
								 OR er.id_request_status = 4); # Aceptado
					`
					return model_service.customQuery(query).then(function(requisites) {
						var data = { data: requisites[0], total: requisites.length }
						return data
					})
				default: // Administrador
					/*query = `
						SELECT 
						FROM stamp.user_answer AS 
						JOIN stamp.evaluation_request AS er ON (er.id_service = ua.id_service AND er.id_question = ua.id_question)
						JOIN stamp.user AS u ON u.id = ua.id_user
						WHERE ua.id_service = ${body.id_service}
						AND ua.id_question = ${body.id_question}
						AND (er.id_request_status = 3 OR er.id_request_status = 4); # Pendiente 3 o Aceptado 4
					`
					return model_chats.customQuery(query).then(function(requisites) {
						var data = { data: requisites[0], total: requisites.length }
						return data
					})*/
					break
			}
		})
	}

	/**
	 * 	Muestra el historial de mensajes de un chat en específico
	 *  /api/service/get_chat_messages?id_evaluation_request=1
	 */
	var get_chat_messages = function(user, body) {
		var query = `
			SELECT *
			FROM stamp.chats as ch
			WHERE ch.id_evaluation_request = ${body.id_evaluation_request}
			ORDER BY ch.timestamp ASC;
		`
		return model_service.customQuery(query).then((requisites) => {
			var data = { data: requisites, total: requisites.length }
			return data
		})
	}

	getMap.set('get_chats', { method: get_chats, permits: Permissions.PLATFORM })
	getMap.set('get_chat_messages', { method: get_chat_messages, permits: Permissions.PLATFORM })
	getMap.set('service_incomplete', { method: get_services_incomplete, permits: Permissions.NONE })
	getMap.set('requisites_service', { method: get_requisites_for_service, permits: Permissions.ENTITY_SERVICE })
	getMap.set('list_empty_user_answers', { method: list_empty_user_answers, permits: Permissions.ENTITY_SERVICE })
	getMap.set('questiontopic_all', { method: get_questiontopic_all, permits: Permissions.NONE })
	getMap.set('service', { method: get_entity_service, permits: Permissions.NONE })
	getMap.set('category', { method: get_category, permits: Permissions.NONE })
	getMap.set('questiontopic', { method: get_questiontopic, permits: Permissions.NONE })
	getMap.set('form', { method: get_entity_form, permits: Permissions.NONE })
	getMap.set('type', { method: get_type, permits: Permissions.NONE })
	getMap.set('question', { method: get_question, permits: Permissions.NONE })
	getMap.set('service_category', { method: get_entity_service_category, permits: Permissions.NONE })
	getMap.set('service_institution_name', { method: get_entity_service_institution_name, permits: Permissions.NONE })
	getMap.set('service_name', { method: get_entity_service_name, permits: Permissions.NONE })
	getMap.set('list_institutions', { method: get_filtered_list_institutions, permits: Permissions.NONE })
	getMap.set('table_institutions', { method: get_filtered_list_institutions_csv, permits: Permissions.NONE })
	getMap.set('list_certified_services', { method: list_certified_services, permits: Permissions.ENTITY_SERVICE })
	getMap.set('list_rejected_services', { method: list_rejected_services, permits: Permissions.ENTITY_SERVICE })
	getMap.set('list_in_progress_services', { method: list_in_progress_services, permits: Permissions.ENTITY_SERVICE })
	getMap.set('service_info', { method: get_service_info, permits: Permissions.ENTITY_SERVICE })
	getMap.set('service_comments', { method: get_service_comments, permits: Permissions.ENTITY_SERVICE })
	getMap.set('process_service', { method: get_service_process, permits: Permissions.NONE })
	getMap.set('list_services_selectable', { method: get_filtered_list_services_for_select, permits: Permissions.NONE })
	getMap.set('list_users_admin', { method: list_users_admin, permits: Permissions.NONE }) // TODO: CHANGE PERMSIONS TO PLATFORM
	getMap.set('list_postulations_admin', { method: list_postulations_admin, permits: Permissions.NONE }) // TODO: CHANGE PERMSIONS TO PLATFORM
	getMap.set('list_requisites_admin', { method: list_requisites_admin, permits: Permissions.NONE }) // TODO: CHANGE PERMSIONS TO PLATFORM
	getMap.set('list_motive', { method: get_list_motive, permits: Permissions.NONE })
	getMap.set('points_user', { method: get_points_user, permits: Permissions.NONE })
	getMap.set('questions_calification', { method: get_questions_calificate_citizien, permits: Permissions.NONE }) // Revisar los permisos
	getMap.set('all_services', { method: get_all_services, permits: Permissions.NONE }) // Revisar los permisos
	getMap.set('institution', { method: get_institution_info, permits: Permissions.NONE }) // TODO: Change to PLATFORM
	getMap.set('institution_service', { method: get_institution_service, permits: Permissions.NONE }) // TODO: Change to PLATFORM
	getMap.set('institution_service_certified', { method: get_institution_service_certified, permits: Permissions.NONE }) // TODO: Change to PLATFORM
	getMap.set('get_hall_csv', { method: get_hall_csv, permits: Permissions.ADMIN })
	getMap.set('questions_category', { method: get_questions_category, permits: Permissions.PLATFORM })
	getMap.set('list_institutions_admin', { method: list_institutions_admin, permits: Permissions.ADMIN })
	getMap.set('get_certificates', { method: get_certificates, permits: Permissions.ENTITY_SERVICE })
	getMap.set('requisite_progress_evidence', { method: get_requisite_progress_evidence, permits: Permissions.NONE }) //permisos
	getMap.set('requisite_progress', { method: get_requisite_progress, permits: Permissions.ADMIN })
	getMap.set('requisite_rejection_justify', { method: get_justification_requisite_rejection, permits: Permissions.NONE }) //permisos
	getMap.set('requisites_evaluated', { method: get_requisites_evaluated, permits: Permissions.NONE }) //permisos

	/**
	 * @api {post} api/service/service Create service information
	 * @apiName Postservice
	 * @apiGroup service
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
	 * @apiParam {Text} url 
	 * @apiParam {Number} id_category 
	 * @apiParam {Number} id_institution 
	 * @apiParam {Number} id_user 
	 * @apiParam {String} hash 
	 * @apiParam {Number} rate 
	 * @apiParam {String} test_user 
	 * @apiParam {String} test_password 
	 * @apiParam {Boolean} is_active 
	 * @apiParam {Boolean} is_product 
	 * @apiParam {Boolean} is_service 
	 * @apiParam {Date} timestamp 
	 * @apiParam {Number} current_status 
	 * @apiParam {Array} roles 
	 * @apiParam {Object} category 
	 * @apiParam {Object} institution 
	 * @apiParam {Array} history 
	 * @apiParam {Object} status 
	 * @apiParam {Array} comments 
	 * @apiParam {Array} requirements 
 	 * 
	 */
	var create_entity_service = function(user, body) {
		var result
		var query = `SELECT * FROM stamp.institution_user WHERE id_user = "${user.id}";`
		return institution_user.customQuery(query).then((user_institution) => {
			return model_entity_service.create({
				name: body.name,
				url: body.url,
				test_user: body.test_user,
				test_password: body.test_password,
				id_category: body.id_category,
				id_user: user_institution[0].id_user,
				id_institution: user_institution[0].id_institution,
				current_status: 10,
				is_active: 1
			}).then((serv) => {
				result = serv.data.id
				query = ` 
					SET FOREIGN_KEY_CHECKS=0;
					INSERT INTO stamp.service_status 
					(id_service, level, id_status) 
					VALUES 
					("${result}", "${body.level}", "10");
					SET FOREIGN_KEY_CHECKS=1;
				`
				return model_question.customQuery(query).then((value) => {
					return create_user_answers_verification(user, {id_service: result}).then((vals) => {
						return list_empty_user_answers(user, {id_service: result})
					})
				})
			})
		})
	}
	
	//var create_entity_service = function (user, body) {
	//	return model_entity_service.create(body)
	//}
	/**
	 * @api {post} api/service/category Create category information
	 * @apiName Postcategory
	 * @apiGroup service
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var create_category = function (user, body) {
		return model_category.create(body)
	}
	/**
	 * @api {post} api/service/questiontopic Create questiontopic information
	 * @apiName Postquestiontopic
	 * @apiGroup service
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
	 * @apiParam {Number} id_usertype 
	 * @apiParam {Number} id_category 
 	 * 
	 */
	var create_questiontopic = function (user, body) {
		return model_questiontopic.create(body)
	}
	/**
	 * @api {post} api/service/form Create form information
	 * @apiName Postform
	 * @apiGroup service
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
	 * @apiParam {Number} id_category 
	 * @apiParam {Date} timestamp 
	 * @apiParam {Object} category 
 	 * 
	 */
	var create_entity_form = function (user, body) {
		return model_entity_form.create(body)
	}
	/**
	 * @api {post} api/service/type Create type information
	 * @apiName Posttype
	 * @apiGroup service
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var create_type = function (user, body) {
		return model_type.create(body)
	}
	/**
	 * @api {post} api/service/question Create question information
	 * @apiName Postquestion
	 * @apiGroup service
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {Number} id_topic 
	 * @apiParam {Number} level 
	 * @apiParam {Text} text 
	 * @apiParam {Text} criteria 
	 * @apiParam {Text} evidence 
	 * @apiParam {Text} legal_support 
	 * @apiParam {Text} help 
 	 * 
	 */
	var create_question = function (user, body) {
		return model_question.create(body)
	}
    var create_service_comment = function(user, body) {
        body.id_user = user.id
            //body.id_service = service.id
        return model_service_comment.create(body)
    }
		
		var save_service_evidence = function (user, body, files) {
			return utiles.uploadFileToGCS(user.id, files.file, user.id, files.file.type).then((url) => {
				// Insertar objetos multimedia en tabla stamp.media
				return model_media.create({
					url: url,
					type: files.file.type
				}).then((media) => {
					// Actualizar el user_answer del media subido
					var ua_body = {
						id_question: body.id_question,
						id_user: user.id,
						id_media: media.insertId,
						id_topic: body.id_topic,
						id_service: body.id_service,
						// comment: body.comment, TODO: ADD TO user_answer
						id_status: "1"
					}
					return model_user_answer.update(ua_body, {id:body.id_user_answer})
				}).then(() => {
					// Traer todos los requisitos del servicio que están incompletos
					var query = `
						SELECT *
						FROM stamp.user_answer AS ua
						WHERE (ua.id_media IS NULL OR ua.id_status = 0)
						AND id_service = ${body.id_service};
					`
					return model_user_answer.customQuery(query).then((incompletos) => {
						// Cambiar estado del servicio
						if(!incompletos.length) {
							var s_body = {
								id: body.id_service,
								current_status: "1"
							}
							return model_service.update(s_body, {id: s_body.id}).then(() => {
								var ss_body = {
									id_service: body.id_service,
									id_status: "1"
								}
								return service_status.update(ss_body, {id_service: ss_body.id_service}).then(() => {
									return {mensaje:`Evidencia subida correctamente. Evidencias completadas`}
								})
							})
						}
						return {mensaje:`Evidencia subida correctamente`}
					})
				})
			})
		}

    /*
     * crear puntos
     * body.id_user
     * body.id_motives
     * body.motive_value
     * body.justification
     */

    var create_points = function(user, body) {
        var new_points_user = []
        new_points_user.id_user = parseInt(body.id_user)
        new_points_user.id_motives = parseInt(body.id_motives)
            // traer puntos del usuario
            // require body.id_user
        return get_points_user(user,{id_user: new_points_user.id_user}).then((points_total_user) => {
					points_total_user = points_total_user.list_points
          new_points_user.prev_points = (points_total_user[0].result != undefined) ? points_total_user[0].result : 0
            var params = []
            params.filter_field = "id"
            params.filter_value = new_points_user.id_motives
            return get_list_motive(user, params).then((motive) => {
                // en esta parte se revisa si el motivo no trae su valor en puntos, siendo así es requerido en el body
                new_points_user.value = (motive.data[0].points == null || motive.data[0].points == 0) ? parseInt(body.motive_value) : parseInt(motive.data[0].points)
                new_points_user.justification = (motive.data[0].points == null || motive.data[0].points == undefined || motive.data[0].points == 0) ? body.justification : motive.data[0].name
                new_points_user.result = new_points_user.prev_points + new_points_user.value
                return model_points.create(new_points_user).then(() => {
                    var query = `UPDATE user SET user.points=${new_points_user.result} WHERE user.id=${new_points_user.id_user};`
                        // Acualiza puntaje de user en user tabla
                    return model_user.customQuery(query).then(() => {
                        return { message: "points user update" }
                    })
                })
            })
        })
    }
	/*
	 * body.id_category
	 * body.text
	 */
	var create_questions_category = function(user, body){
		var params = []
		params.id_category = parseInt(body.id_category)
		params.text = body.text
		return model_category_questions.create(params).then(() =>{
			return { message: "nueva pregunta al ciudadano creada" }
		})
	}
	var create_question = function (user, body) {
		return model_question.create(body)
	}
	/*
	 * body.points
	 * body.name
	 */
	var create_motives = function(user, body){
		var params = []
		if(body.name != undefined && body.points != undefined){
			params.name = body.name
			params.points = parseInt(body.points)
			return model_motives.create(params).then(() =>{
				return { message: "Creado motivo" }
			})
		}
		return { message: "debe enviar name y points para nuevo motivo"}
	}

/*
****
*  var create_entity_service = function(user, body) {
            var query = SELECT * FROM stamp.institution_user WHERE id_user = "${user.id}";
            return institution_user.customQuery(query).then((user_institution) => {
                body.id_user = user_institution[0].id_user
                body.id_institution = user_institution[0].id_institution
                body.current_status = 1
                body.is_active = 1
                return model_entity_service.create(body).then((serv) => {
                    return service_status.create({
                        id_service: serv.data.id,
                        id_status: 1
                    })
                })
            })
        }
*
*
**
*/


var create_user_answers_verification = function(token, body) {
	if (body.id_service) {
		return get_requisites_for_service(token, { "id_service": body.id_service }).then(function(requisitos) {
			if (requisitos) {
				var query = ''
				var req = requisitos.data
				for (var i in req) {
					query += `
						USE stamp; SET FOREIGN_KEY_CHECKS=0;
						INSERT INTO user_answer(id_question, requisite, support_legal, justification, evidence,help,id_topic,id_service,id_user,id_status) 
						VALUES ('${req[i].id_question}', '${req[i].requisite}', '${req[i].support_legal}', '${req[i].justification}', '${req[i].evidence}', '${req[i].help}', '${req[i].id_topic}', '${req[i].id_service}', '${req[i].id_user}', '0');
						SET FOREIGN_KEY_CHECKS=1;
					`
				}
				return model_category.customQuery(query)
			}
		})
	}
}

var update_evidence = function (user, body, files) {
	return utiles.uploadFileToGCS(user.id, files.file, user.id, files.file.type).then((url) => {
		// Insertar objetos multimedia en tabla stamp.media
		return model_media.create({
			url: url,
			type: files.file.type
		}).then((media) => {
			// Actualizar el user_answer del media subido
			var ua_body = {
				id_media: media.insertId,
			}
			return model_user_answer.update(ua_body, {id:body.id_user_answer})
		})
	})
}

	var write_to_chat = function(user, body) {
		return model_chats.create({
			id_evaluation_request: body.id_evaluation_request,
			id_sender: user.id,
			text: body.text,
		})
	}
	
	var repostulate_service = function (user, params){
		if(params){
			var query = `SELECT * FROM stamp.service s LEFT JOIN stamp.service_status s_st ON s.id = s_st.id_service WHERE s.id = '${params.id_service}';`
			return model_service.customQuery(query).then(function(result){
				if (result){
					var query = `UPDATE stamp.service SET current_status = '11' WHERE id = ${params.id_service};
								UPDATE stamp.service_status SET id_status = '11' WHERE id_service = ${params.id_service};`
					return model_service.customQuery(query).then(function(){
						var nuevo = {
							"id_category":result[0].id_category,
							"level":result[0].level,
							"name":result[0].name,
							"url":result[0].url,
							"test_user":result[0].test_user,
							"test_password":result[0].test_password
						}
						return create_entity_service(user, nuevo).then(function(nuevo){
							return nuevo
						})
					})
				}
			})
		}
	}

	postMap.set('write_to_chat', { method: write_to_chat, permits: Permissions.PLATFORM })
	postMap.set('update_evidence', { method: update_evidence, permits: Permissions.ENTITY_SERVICE })
	postMap.set('requisites_service', { method: create_user_answers_verification, permits: Permissions.NONE })//Permisos
	postMap.set('service', { method: create_entity_service, permits: Permissions.ENTITY_SERVICE }) // PERMSSIONS
	postMap.set('save_evidence', { method: save_service_evidence, permits: Permissions.ENTITY_SERVICE })
	postMap.set('service_comment', { method: create_service_comment, permits: Permissions.FORUM })
	postMap.set('category', { method: create_category, permits: Permissions.ADMIN })
	postMap.set('questiontopic', { method: create_questiontopic, permits: Permissions.ADMIN })
	postMap.set('form', { method: create_entity_form, permits: Permissions.ADMIN })
	postMap.set('type', { method: create_type, permits: Permissions.ADMIN })
	postMap.set('question', { method: create_question, permits: Permissions.ADMIN })
	postMap.set('points', { method: create_points, permits: Permissions.ADMIN })
	postMap.set('questions_category', { method: create_questions_category, permits: Permissions.ADMIN })
	postMap.set('motives', { method: create_motives, permits: Permissions.ADMIN })
	postMap.set('repostulate_service', { method: repostulate_service, permits: Permissions.NONE })//permisos
	/**
	 * @api {put} api/service/service Update service information
	 * @apiName Putservice
	 * @apiGroup service
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
	 * @apiParam {Text} url 
	 * @apiParam {Number} id_category 
	 * @apiParam {Number} id_institution 
	 * @apiParam {Number} id_user 
	 * @apiParam {String} hash 
	 * @apiParam {Number} rate 
	 * @apiParam {String} test_user 
	 * @apiParam {String} test_password 
	 * @apiParam {Boolean} is_active 
	 * @apiParam {Boolean} is_product 
	 * @apiParam {Boolean} is_service 
	 * @apiParam {Date} timestamp 
	 * @apiParam {Number} current_status 
	 * @apiParam {Array} roles 
	 * @apiParam {Object} category 
	 * @apiParam {Object} institution 
	 * @apiParam {Array} history 
	 * @apiParam {Object} status 
	 * @apiParam {Array} comments 
	 * @apiParam {Array} requirements 
 	 * 
	 */
	var update_entity_service = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_entity_service.update(body,{id:body.id})
	}
	/**
	 * @api {put} api/service/category Update category information
	 * @apiName Putcategory
	 * @apiGroup service
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var update_category = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_category.update(body,{id:body.id})
	}
	/**
	 * @api {put} api/service/questiontopic Update questiontopic information
	 * @apiName Putquestiontopic
	 * @apiGroup service
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
	 * @apiParam {Number} id_usertype 
	 * @apiParam {Number} id_category 
 	 * 
	 */
	var update_questiontopic = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_questiontopic.update(body,{id:body.id})
	}
	/**
	 * @api {put} api/service/form Update form information
	 * @apiName Putform
	 * @apiGroup service
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
	 * @apiParam {Number} id_category 
	 * @apiParam {Date} timestamp 
	 * @apiParam {Object} category 
 	 * 
	 */
	var update_entity_form = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_entity_form.update(body,{id:body.id})
	}
	/**
	 * @api {put} api/service/type Update type information
	 * @apiName Puttype
	 * @apiGroup service
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var update_type = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_type.update(body,{id:body.id})
	}
	/**
	 * @api {put} api/service/question Update question information
	 * @apiName Putquestion
	 * @apiGroup service
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {Number} id_topic 
	 * @apiParam {Number} level 
	 * @apiParam {Text} text 
	 * @apiParam {Text} criteria 
	 * @apiParam {Text} evidence 
	 * @apiParam {Text} legal_support 
	 * @apiParam {Text} help 
 	 * 
	 */
	var update_question = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_question.update(body,{id:body.id})
	}
	/*
	 * body.id
	 * body.points
	 */
	var update_motives = function(user, body){
		if(body.id != undefined && body.points != undefined){
			var query=`UPDATE motives m SET m.points=${parseInt(body.points)} WHERE m.id=${parseInt(body.id)};`
			return model_motives.customQuery(query).then(() =>{
				return { message: "Motivo update" }
			})
		}
		return { message: "no se pudo actualizar los puntos del motivo" }
	}

	putMap.set('service', { method: update_entity_service, permits: Permissions.ADMIN })
	putMap.set('category', { method: update_category, permits: Permissions.ADMIN })
	putMap.set('questiontopic', { method: update_questiontopic, permits: Permissions.ADMIN })
	putMap.set('form', { method: update_entity_form, permits: Permissions.ADMIN })
	putMap.set('type', { method: update_type, permits: Permissions.ADMIN })
	putMap.set('question', { method: update_question, permits: Permissions.ADMIN })
	putMap.set('motives', { method: update_motives, permits: Permissions.ADMIN })
	
	/**
	 * @api {delete} api/service/service Delete service information
	 * @apiName Deleteservice
	 * @apiGroup service
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
	 * @apiParam {Text} url 
	 * @apiParam {Number} id_category 
	 * @apiParam {Number} id_institution 
	 * @apiParam {Number} id_user 
	 * @apiParam {String} hash 
	 * @apiParam {Number} rate 
	 * @apiParam {String} test_user 
	 * @apiParam {String} test_password 
	 * @apiParam {Boolean} is_active 
	 * @apiParam {Boolean} is_product 
	 * @apiParam {Boolean} is_service 
	 * @apiParam {Date} timestamp 
	 * @apiParam {Number} current_status 
	 * @apiParam {Array} roles 
	 * @apiParam {Object} category 
	 * @apiParam {Object} institution 
	 * @apiParam {Array} history 
	 * @apiParam {Object} status 
	 * @apiParam {Array} comments 
	 * @apiParam {Array} requirements 
 	 * 
	 */
	var delete_entity_service = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_entity_service.delete(body,{id:body.id})
	}
	/**
	 * @api {delete} api/service/category Delete category information
	 * @apiName Deletecategory
	 * @apiGroup service
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var delete_category = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_category.delete(body,{id:body.id})
	}
	/**
	 * @api {delete} api/service/questiontopic Delete questiontopic information
	 * @apiName Deletequestiontopic
	 * @apiGroup service
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
	 * @apiParam {Number} id_usertype 
	 * @apiParam {Number} id_category 
 	 * 
	 */
	var delete_questiontopic = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_questiontopic.delete(body,{id:body.id})
	}
	/**
	 * @api {delete} api/service/form Delete form information
	 * @apiName Deleteform
	 * @apiGroup service
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
	 * @apiParam {Number} id_category 
	 * @apiParam {Date} timestamp 
	 * @apiParam {Object} category 
 	 * 
	 */
	var delete_entity_form = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_entity_form.delete(body,{id:body.id})
	}
	/**
	 * @api {delete} api/service/type Delete type information
	 * @apiName Deletetype
	 * @apiGroup service
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {String} name 
 	 * 
	 */
	var delete_type = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_type.delete(body,{id:body.id})
	}
	/**
	 * @api {delete} api/service/question Delete question information
	 * @apiName Deletequestion
	 * @apiGroup service
	 * @apiVersion 1.0.1
	 * 
	 * @apiParam {Number} id 
	 * @apiParam {Number} id_topic 
	 * @apiParam {Number} level 
	 * @apiParam {Text} text 
	 * @apiParam {Text} criteria 
	 * @apiParam {Text} evidence 
	 * @apiParam {Text} legal_support 
	 * @apiParam {Text} help 
 	 * 
	 */
	var delete_question = function (user, body) {
		if (!body.id) {
			throw utiles.informError(400)
		}
		return model_question.delete(body,{id:body.id})
	}
	deleteMap.set('service', { method: delete_entity_service, permits: Permissions.ADMIN })
	deleteMap.set('category', { method: delete_category, permits: Permissions.ADMIN })
	deleteMap.set('questiontopic', { method: delete_questiontopic, permits: Permissions.ADMIN })
	deleteMap.set('form', { method: delete_entity_form, permits: Permissions.ADMIN })
	deleteMap.set('type', { method: delete_type, permits: Permissions.ADMIN })
	deleteMap.set('question', { method: delete_question, permits: Permissions.ADMIN })
	var params = [getMap, postMap, putMap, deleteMap]
	BaseController.apply(this, params)
	//---------------------------------------------------------------
	return this;
}
util.inherits(service_controller, BaseController)
module.exports = service_controller
